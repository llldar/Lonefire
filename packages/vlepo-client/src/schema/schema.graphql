### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AffectedRowsOutput {
  count: Int!
}

type Blog implements Node {
  createdAt: DateTime!

  """ID for a resource"""
  id: ID
  links(after: LinkWhereUniqueInput, before: LinkWhereUniqueInput, first: Int, last: Int): [Link!]!
  name: String
  ownerId: String!
  papers(after: PaperWhereUniqueInput, before: PaperWhereUniqueInput, first: Int, last: Int): [Paper!]!
  papersConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PaperConnection
  postCommentCount: Int
  postReactionCount: Int
  postViewCount: Int
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  postsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PostConnection
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  projectsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ProjectConnection
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  tagsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TagConnection
  thoughts(after: ThoughtWhereUniqueInput, before: ThoughtWhereUniqueInput, first: Int, last: Int): [Thought!]!
  thoughtsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ThoughtConnection
  updatedAt: DateTime!
  userCount: Int
  visitorCount: Int!
}

type BlogConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [BlogEdge]

  """Flattened list of Blog type"""
  nodes: [Blog]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input BlogCreateManyOwnerInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateManyOwnerInputEnvelope {
  data: [BlogCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input BlogCreateNestedManyWithoutOwnerInput {
  connect: [BlogWhereUniqueInput!]
  connectOrCreate: [BlogCreateOrConnectWithoutOwnerInput!]
  create: [BlogCreateWithoutOwnerInput!]
  createMany: BlogCreateManyOwnerInputEnvelope
}

input BlogCreateNestedOneWithoutDesignsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutDesignsInput
  create: BlogCreateWithoutDesignsInput
}

input BlogCreateNestedOneWithoutLinksInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutLinksInput
  create: BlogCreateWithoutLinksInput
}

input BlogCreateNestedOneWithoutPapersInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutPapersInput
  create: BlogCreateWithoutPapersInput
}

input BlogCreateNestedOneWithoutPostsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutPostsInput
  create: BlogCreateWithoutPostsInput
}

input BlogCreateNestedOneWithoutProjectsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutProjectsInput
  create: BlogCreateWithoutProjectsInput
}

input BlogCreateNestedOneWithoutTagsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutTagsInput
  create: BlogCreateWithoutTagsInput
}

input BlogCreateNestedOneWithoutThoughtsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutThoughtsInput
  create: BlogCreateWithoutThoughtsInput
}

input BlogCreateOrConnectWithoutDesignsInput {
  create: BlogCreateWithoutDesignsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutLinksInput {
  create: BlogCreateWithoutLinksInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutOwnerInput {
  create: BlogCreateWithoutOwnerInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutPapersInput {
  create: BlogCreateWithoutPapersInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutPostsInput {
  create: BlogCreateWithoutPostsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutProjectsInput {
  create: BlogCreateWithoutProjectsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutTagsInput {
  create: BlogCreateWithoutTagsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateOrConnectWithoutThoughtsInput {
  create: BlogCreateWithoutThoughtsInput!
  where: BlogWhereUniqueInput!
}

input BlogCreateWithoutDesignsInput {
  createdAt: DateTime
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  papers: PaperCreateNestedManyWithoutBlogInput
  posts: PostCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutLinksInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  papers: PaperCreateNestedManyWithoutBlogInput
  posts: PostCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutOwnerInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  papers: PaperCreateNestedManyWithoutBlogInput
  posts: PostCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutPapersInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  posts: PostCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutPostsInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  papers: PaperCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutProjectsInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  papers: PaperCreateNestedManyWithoutBlogInput
  posts: PostCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutTagsInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  papers: PaperCreateNestedManyWithoutBlogInput
  posts: PostCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  thoughts: ThoughtCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

input BlogCreateWithoutThoughtsInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutBlogInput
  id: String
  links: LinkCreateNestedManyWithoutBlogInput
  name: String
  owner: UserCreateNestedOneWithoutBlogsInput!
  papers: PaperCreateNestedManyWithoutBlogInput
  posts: PostCreateNestedManyWithoutBlogInput
  projects: ProjectCreateNestedManyWithoutBlogInput
  subscribers: SubscriberCreateNestedManyWithoutBlogInput
  tags: TagCreateNestedManyWithoutBlogInput
  updatedAt: DateTime
  visitorCount: Int
}

type BlogEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Blog
}

input BlogListRelationFilter {
  every: BlogWhereInput
  none: BlogWhereInput
  some: BlogWhereInput
}

input BlogScalarWhereInput {
  AND: [BlogScalarWhereInput!]
  NOT: [BlogScalarWhereInput!]
  OR: [BlogScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringNullableFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
  visitorCount: IntFilter
}

input BlogUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateManyWithWhereWithoutOwnerInput {
  data: BlogUpdateManyMutationInput!
  where: BlogScalarWhereInput!
}

input BlogUpdateManyWithoutOwnerInput {
  connect: [BlogWhereUniqueInput!]
  connectOrCreate: [BlogCreateOrConnectWithoutOwnerInput!]
  create: [BlogCreateWithoutOwnerInput!]
  createMany: BlogCreateManyOwnerInputEnvelope
  delete: [BlogWhereUniqueInput!]
  deleteMany: [BlogScalarWhereInput!]
  disconnect: [BlogWhereUniqueInput!]
  set: [BlogWhereUniqueInput!]
  update: [BlogUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [BlogUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [BlogUpsertWithWhereUniqueWithoutOwnerInput!]
}

input BlogUpdateOneRequiredWithoutDesignsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutDesignsInput
  create: BlogCreateWithoutDesignsInput
  update: BlogUpdateWithoutDesignsInput
  upsert: BlogUpsertWithoutDesignsInput
}

input BlogUpdateOneRequiredWithoutLinksInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutLinksInput
  create: BlogCreateWithoutLinksInput
  update: BlogUpdateWithoutLinksInput
  upsert: BlogUpsertWithoutLinksInput
}

input BlogUpdateOneRequiredWithoutPostsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutPostsInput
  create: BlogCreateWithoutPostsInput
  update: BlogUpdateWithoutPostsInput
  upsert: BlogUpsertWithoutPostsInput
}

input BlogUpdateOneRequiredWithoutTagsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutTagsInput
  create: BlogCreateWithoutTagsInput
  update: BlogUpdateWithoutTagsInput
  upsert: BlogUpsertWithoutTagsInput
}

input BlogUpdateOneRequiredWithoutThoughtsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutThoughtsInput
  create: BlogCreateWithoutThoughtsInput
  update: BlogUpdateWithoutThoughtsInput
  upsert: BlogUpsertWithoutThoughtsInput
}

input BlogUpdateOneWithoutPapersInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutPapersInput
  create: BlogCreateWithoutPapersInput
  delete: Boolean
  disconnect: Boolean
  update: BlogUpdateWithoutPapersInput
  upsert: BlogUpsertWithoutPapersInput
}

input BlogUpdateOneWithoutProjectsInput {
  connect: BlogWhereUniqueInput
  connectOrCreate: BlogCreateOrConnectWithoutProjectsInput
  create: BlogCreateWithoutProjectsInput
  delete: Boolean
  disconnect: Boolean
  update: BlogUpdateWithoutProjectsInput
  upsert: BlogUpsertWithoutProjectsInput
}

input BlogUpdateWithWhereUniqueWithoutOwnerInput {
  data: BlogUpdateWithoutOwnerInput!
  where: BlogWhereUniqueInput!
}

input BlogUpdateWithoutDesignsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  papers: PaperUpdateManyWithoutBlogInput
  posts: PostUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutLinksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  papers: PaperUpdateManyWithoutBlogInput
  posts: PostUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutOwnerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutBlogInput
  posts: PostUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutPapersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  posts: PostUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  papers: PaperUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutProjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  papers: PaperUpdateManyWithoutBlogInput
  posts: PostUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutTagsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  papers: PaperUpdateManyWithoutBlogInput
  posts: PostUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  thoughts: ThoughtUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpdateWithoutThoughtsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutBlogInput
  id: StringFieldUpdateOperationsInput
  links: LinkUpdateManyWithoutBlogInput
  name: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutBlogsInput
  papers: PaperUpdateManyWithoutBlogInput
  posts: PostUpdateManyWithoutBlogInput
  projects: ProjectUpdateManyWithoutBlogInput
  subscribers: SubscriberUpdateManyWithoutBlogInput
  tags: TagUpdateManyWithoutBlogInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visitorCount: IntFieldUpdateOperationsInput
}

input BlogUpsertWithWhereUniqueWithoutOwnerInput {
  create: BlogCreateWithoutOwnerInput!
  update: BlogUpdateWithoutOwnerInput!
  where: BlogWhereUniqueInput!
}

input BlogUpsertWithoutDesignsInput {
  create: BlogCreateWithoutDesignsInput!
  update: BlogUpdateWithoutDesignsInput!
}

input BlogUpsertWithoutLinksInput {
  create: BlogCreateWithoutLinksInput!
  update: BlogUpdateWithoutLinksInput!
}

input BlogUpsertWithoutPapersInput {
  create: BlogCreateWithoutPapersInput!
  update: BlogUpdateWithoutPapersInput!
}

input BlogUpsertWithoutPostsInput {
  create: BlogCreateWithoutPostsInput!
  update: BlogUpdateWithoutPostsInput!
}

input BlogUpsertWithoutProjectsInput {
  create: BlogCreateWithoutProjectsInput!
  update: BlogUpdateWithoutProjectsInput!
}

input BlogUpsertWithoutTagsInput {
  create: BlogCreateWithoutTagsInput!
  update: BlogUpdateWithoutTagsInput!
}

input BlogUpsertWithoutThoughtsInput {
  create: BlogCreateWithoutThoughtsInput!
  update: BlogUpdateWithoutThoughtsInput!
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  createdAt: DateTimeFilter
  designs: DesignListRelationFilter
  id: StringFilter
  links: LinkListRelationFilter
  name: StringNullableFilter
  owner: UserWhereInput
  ownerId: StringFilter
  papers: PaperListRelationFilter
  posts: PostListRelationFilter
  projects: ProjectListRelationFilter
  subscribers: SubscriberListRelationFilter
  tags: TagListRelationFilter
  thoughts: ThoughtListRelationFilter
  updatedAt: DateTimeFilter
  visitorCount: IntFilter
}

input BlogWhereUniqueInput {
  id: String
}

interface Commendable {
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): CommentConnection
}

type Comment implements Node {
  childComments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  childCommentsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): CommentConnection
  content: String!
  createdAt: DateTime!
  editedAt: DateTime
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  imagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  language: Language!
  owner: User!
  parent: Comment
  post: Post
  renderedContent: Json!
  thought: Thought
  updatedAt: DateTime!
}

type CommentConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CommentEdge]

  """Flattened list of Comment type"""
  nodes: [Comment]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input CommentCreateInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateManyDesignInput {
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  language: Language!
  parentId: String
  postId: String
  thoughtId: String
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyDesignInputEnvelope {
  data: [CommentCreateManyDesignInput!]
  skipDuplicates: Boolean
}

input CommentCreateManyOwnerInput {
  content: String!
  createdAt: DateTime
  designId: String
  editedAt: DateTime
  id: String
  language: Language!
  parentId: String
  postId: String
  thoughtId: String
  updatedAt: DateTime
}

input CommentCreateManyOwnerInputEnvelope {
  data: [CommentCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input CommentCreateManyParentInput {
  content: String!
  createdAt: DateTime
  designId: String
  editedAt: DateTime
  id: String
  language: Language!
  postId: String
  thoughtId: String
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyParentInputEnvelope {
  data: [CommentCreateManyParentInput!]
  skipDuplicates: Boolean
}

input CommentCreateManyPostInput {
  content: String!
  createdAt: DateTime
  designId: String
  editedAt: DateTime
  id: String
  language: Language!
  parentId: String
  thoughtId: String
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]
  skipDuplicates: Boolean
}

input CommentCreateManyThoughtInput {
  content: String!
  createdAt: DateTime
  designId: String
  editedAt: DateTime
  id: String
  language: Language!
  parentId: String
  postId: String
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyThoughtInputEnvelope {
  data: [CommentCreateManyThoughtInput!]
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutDesignInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutDesignInput!]
  create: [CommentCreateWithoutDesignInput!]
  createMany: CommentCreateManyDesignInputEnvelope
}

input CommentCreateNestedManyWithoutOwnerInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerInput!]
  create: [CommentCreateWithoutOwnerInput!]
  createMany: CommentCreateManyOwnerInputEnvelope
}

input CommentCreateNestedManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  create: [CommentCreateWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateNestedManyWithoutThoughtInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutThoughtInput!]
  create: [CommentCreateWithoutThoughtInput!]
  createMany: CommentCreateManyThoughtInputEnvelope
}

input CommentCreateNestedOneWithoutChildCommentsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutChildCommentsInput
  create: CommentCreateWithoutChildCommentsInput
}

input CommentCreateNestedOneWithoutImagesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutImagesInput
  create: CommentCreateWithoutImagesInput
}

input CommentCreateOrConnectWithoutChildCommentsInput {
  create: CommentCreateWithoutChildCommentsInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutDesignInput {
  create: CommentCreateWithoutDesignInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutImagesInput {
  create: CommentCreateWithoutImagesInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutOwnerInput {
  create: CommentCreateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutThoughtInput {
  create: CommentCreateWithoutThoughtInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutChildCommentsInput {
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateWithoutDesignInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateWithoutImagesInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateWithoutOwnerInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateWithoutParentInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  post: PostCreateNestedOneWithoutCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  thought: ThoughtCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

input CommentCreateWithoutThoughtInput {
  childComments: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutCommentsInput
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutCommentInput
  language: Language!
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutChildCommentsInput
  post: PostCreateNestedOneWithoutCommentsInput
  updatedAt: DateTime
}

type CommentEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Comment
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  designId: StringNullableFilter
  editedAt: DateTimeNullableFilter
  id: StringFilter
  language: EnumLanguageFilter
  parentId: StringNullableFilter
  postId: StringNullableFilter
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CommentUpdateInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  language: EnumLanguageFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutDesignInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutOwnerInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutThoughtInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutDesignInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutDesignInput!]
  create: [CommentCreateWithoutDesignInput!]
  createMany: CommentCreateManyDesignInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutDesignInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutDesignInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutDesignInput!]
}

input CommentUpdateManyWithoutOwnerInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerInput!]
  create: [CommentCreateWithoutOwnerInput!]
  createMany: CommentCreateManyOwnerInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CommentUpdateManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  create: [CommentCreateWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithoutThoughtInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutThoughtInput!]
  create: [CommentCreateWithoutThoughtInput!]
  createMany: CommentCreateManyThoughtInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutThoughtInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutThoughtInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutThoughtInput!]
}

input CommentUpdateOneWithoutChildCommentsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutChildCommentsInput
  create: CommentCreateWithoutChildCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutChildCommentsInput
  upsert: CommentUpsertWithoutChildCommentsInput
}

input CommentUpdateOneWithoutImagesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutImagesInput
  create: CommentCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutImagesInput
  upsert: CommentUpsertWithoutImagesInput
}

input CommentUpdateWithWhereUniqueWithoutDesignInput {
  data: CommentUpdateWithoutDesignInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutOwnerInput {
  data: CommentUpdateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  data: CommentUpdateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutThoughtInput {
  data: CommentUpdateWithoutThoughtInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutChildCommentsInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutDesignInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutImagesInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutOwnerInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutParentInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPostInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  thought: ThoughtUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutThoughtInput {
  childComments: CommentUpdateManyWithoutParentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutCommentsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutCommentInput
  language: EnumLanguageFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsInput
  parent: CommentUpdateOneWithoutChildCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutDesignInput {
  create: CommentCreateWithoutDesignInput!
  update: CommentUpdateWithoutDesignInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutOwnerInput {
  create: CommentCreateWithoutOwnerInput!
  update: CommentUpdateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  update: CommentUpdateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutThoughtInput {
  create: CommentCreateWithoutThoughtInput!
  update: CommentUpdateWithoutThoughtInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutChildCommentsInput {
  create: CommentCreateWithoutChildCommentsInput!
  update: CommentUpdateWithoutChildCommentsInput!
}

input CommentUpsertWithoutImagesInput {
  create: CommentCreateWithoutImagesInput!
  update: CommentUpdateWithoutImagesInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  childComments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  design: DesignWhereInput
  designId: StringNullableFilter
  editedAt: DateTimeNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  language: EnumLanguageFilter
  owner: UserWhereInput
  parent: CommentWhereInput
  parentId: StringNullableFilter
  post: PostWhereInput
  postId: StringNullableFilter
  thought: ThoughtWhereInput
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Design implements Node {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  content: String!
  createdAt: DateTime!
  editedAt: DateTime

  """ID for a resource"""
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  owner: User!
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  updatedAt: DateTime!
  visibility: Visibility!
}

input DesignCreateManyBlogInput {
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  ownerId: String!
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateManyBlogInputEnvelope {
  data: [DesignCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input DesignCreateManyOwnerInput {
  blogId: String!
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateManyOwnerInputEnvelope {
  data: [DesignCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input DesignCreateNestedManyWithoutBlogInput {
  connect: [DesignWhereUniqueInput!]
  connectOrCreate: [DesignCreateOrConnectWithoutBlogInput!]
  create: [DesignCreateWithoutBlogInput!]
  createMany: DesignCreateManyBlogInputEnvelope
}

input DesignCreateNestedManyWithoutOwnerInput {
  connect: [DesignWhereUniqueInput!]
  connectOrCreate: [DesignCreateOrConnectWithoutOwnerInput!]
  create: [DesignCreateWithoutOwnerInput!]
  createMany: DesignCreateManyOwnerInputEnvelope
}

input DesignCreateNestedManyWithoutTagsInput {
  connect: [DesignWhereUniqueInput!]
  connectOrCreate: [DesignCreateOrConnectWithoutTagsInput!]
  create: [DesignCreateWithoutTagsInput!]
}

input DesignCreateNestedOneWithoutCommentsInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutCommentsInput
  create: DesignCreateWithoutCommentsInput
}

input DesignCreateNestedOneWithoutImagesInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutImagesInput
  create: DesignCreateWithoutImagesInput
}

input DesignCreateNestedOneWithoutReactionsInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutReactionsInput
  create: DesignCreateWithoutReactionsInput
}

input DesignCreateNestedOneWithoutSharesInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutSharesInput
  create: DesignCreateWithoutSharesInput
}

input DesignCreateOrConnectWithoutBlogInput {
  create: DesignCreateWithoutBlogInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateOrConnectWithoutCommentsInput {
  create: DesignCreateWithoutCommentsInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateOrConnectWithoutImagesInput {
  create: DesignCreateWithoutImagesInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateOrConnectWithoutOwnerInput {
  create: DesignCreateWithoutOwnerInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateOrConnectWithoutReactionsInput {
  create: DesignCreateWithoutReactionsInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateOrConnectWithoutSharesInput {
  create: DesignCreateWithoutSharesInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateOrConnectWithoutTagsInput {
  create: DesignCreateWithoutTagsInput!
  where: DesignWhereUniqueInput!
}

input DesignCreateWithoutBlogInput {
  comments: CommentCreateNestedManyWithoutDesignInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutDesignInput
  owner: UserCreateNestedOneWithoutDesignsInput!
  reactions: ReactionCreateNestedManyWithoutDesignInput
  shares: ShareCountCreateNestedManyWithoutDesignInput
  tags: TagCreateNestedManyWithoutDesignsInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateWithoutCommentsInput {
  blog: BlogCreateNestedOneWithoutDesignsInput!
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutDesignInput
  owner: UserCreateNestedOneWithoutDesignsInput!
  reactions: ReactionCreateNestedManyWithoutDesignInput
  shares: ShareCountCreateNestedManyWithoutDesignInput
  tags: TagCreateNestedManyWithoutDesignsInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateWithoutImagesInput {
  blog: BlogCreateNestedOneWithoutDesignsInput!
  comments: CommentCreateNestedManyWithoutDesignInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  owner: UserCreateNestedOneWithoutDesignsInput!
  reactions: ReactionCreateNestedManyWithoutDesignInput
  shares: ShareCountCreateNestedManyWithoutDesignInput
  tags: TagCreateNestedManyWithoutDesignsInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateWithoutOwnerInput {
  blog: BlogCreateNestedOneWithoutDesignsInput!
  comments: CommentCreateNestedManyWithoutDesignInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutDesignInput
  reactions: ReactionCreateNestedManyWithoutDesignInput
  shares: ShareCountCreateNestedManyWithoutDesignInput
  tags: TagCreateNestedManyWithoutDesignsInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateWithoutReactionsInput {
  blog: BlogCreateNestedOneWithoutDesignsInput!
  comments: CommentCreateNestedManyWithoutDesignInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutDesignInput
  owner: UserCreateNestedOneWithoutDesignsInput!
  shares: ShareCountCreateNestedManyWithoutDesignInput
  tags: TagCreateNestedManyWithoutDesignsInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateWithoutSharesInput {
  blog: BlogCreateNestedOneWithoutDesignsInput!
  comments: CommentCreateNestedManyWithoutDesignInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutDesignInput
  owner: UserCreateNestedOneWithoutDesignsInput!
  reactions: ReactionCreateNestedManyWithoutDesignInput
  tags: TagCreateNestedManyWithoutDesignsInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignCreateWithoutTagsInput {
  blog: BlogCreateNestedOneWithoutDesignsInput!
  comments: CommentCreateNestedManyWithoutDesignInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutDesignInput
  owner: UserCreateNestedOneWithoutDesignsInput!
  reactions: ReactionCreateNestedManyWithoutDesignInput
  shares: ShareCountCreateNestedManyWithoutDesignInput
  updatedAt: DateTime
  visibility: Visibility
}

input DesignListRelationFilter {
  every: DesignWhereInput
  none: DesignWhereInput
  some: DesignWhereInput
}

input DesignScalarWhereInput {
  AND: [DesignScalarWhereInput!]
  NOT: [DesignScalarWhereInput!]
  OR: [DesignScalarWhereInput!]
  blogId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  editedAt: DateTimeNullableFilter
  id: StringFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
  visibility: EnumVisibilityFilter
}

input DesignUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateManyWithWhereWithoutBlogInput {
  data: DesignUpdateManyMutationInput!
  where: DesignScalarWhereInput!
}

input DesignUpdateManyWithWhereWithoutOwnerInput {
  data: DesignUpdateManyMutationInput!
  where: DesignScalarWhereInput!
}

input DesignUpdateManyWithWhereWithoutTagsInput {
  data: DesignUpdateManyMutationInput!
  where: DesignScalarWhereInput!
}

input DesignUpdateManyWithoutBlogInput {
  connect: [DesignWhereUniqueInput!]
  connectOrCreate: [DesignCreateOrConnectWithoutBlogInput!]
  create: [DesignCreateWithoutBlogInput!]
  createMany: DesignCreateManyBlogInputEnvelope
  delete: [DesignWhereUniqueInput!]
  deleteMany: [DesignScalarWhereInput!]
  disconnect: [DesignWhereUniqueInput!]
  set: [DesignWhereUniqueInput!]
  update: [DesignUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [DesignUpdateManyWithWhereWithoutBlogInput!]
  upsert: [DesignUpsertWithWhereUniqueWithoutBlogInput!]
}

input DesignUpdateManyWithoutOwnerInput {
  connect: [DesignWhereUniqueInput!]
  connectOrCreate: [DesignCreateOrConnectWithoutOwnerInput!]
  create: [DesignCreateWithoutOwnerInput!]
  createMany: DesignCreateManyOwnerInputEnvelope
  delete: [DesignWhereUniqueInput!]
  deleteMany: [DesignScalarWhereInput!]
  disconnect: [DesignWhereUniqueInput!]
  set: [DesignWhereUniqueInput!]
  update: [DesignUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DesignUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [DesignUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DesignUpdateManyWithoutTagsInput {
  connect: [DesignWhereUniqueInput!]
  connectOrCreate: [DesignCreateOrConnectWithoutTagsInput!]
  create: [DesignCreateWithoutTagsInput!]
  delete: [DesignWhereUniqueInput!]
  deleteMany: [DesignScalarWhereInput!]
  disconnect: [DesignWhereUniqueInput!]
  set: [DesignWhereUniqueInput!]
  update: [DesignUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [DesignUpdateManyWithWhereWithoutTagsInput!]
  upsert: [DesignUpsertWithWhereUniqueWithoutTagsInput!]
}

input DesignUpdateOneWithoutCommentsInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutCommentsInput
  create: DesignCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: DesignUpdateWithoutCommentsInput
  upsert: DesignUpsertWithoutCommentsInput
}

input DesignUpdateOneWithoutImagesInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutImagesInput
  create: DesignCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: DesignUpdateWithoutImagesInput
  upsert: DesignUpsertWithoutImagesInput
}

input DesignUpdateOneWithoutReactionsInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutReactionsInput
  create: DesignCreateWithoutReactionsInput
  delete: Boolean
  disconnect: Boolean
  update: DesignUpdateWithoutReactionsInput
  upsert: DesignUpsertWithoutReactionsInput
}

input DesignUpdateOneWithoutSharesInput {
  connect: DesignWhereUniqueInput
  connectOrCreate: DesignCreateOrConnectWithoutSharesInput
  create: DesignCreateWithoutSharesInput
  delete: Boolean
  disconnect: Boolean
  update: DesignUpdateWithoutSharesInput
  upsert: DesignUpsertWithoutSharesInput
}

input DesignUpdateWithWhereUniqueWithoutBlogInput {
  data: DesignUpdateWithoutBlogInput!
  where: DesignWhereUniqueInput!
}

input DesignUpdateWithWhereUniqueWithoutOwnerInput {
  data: DesignUpdateWithoutOwnerInput!
  where: DesignWhereUniqueInput!
}

input DesignUpdateWithWhereUniqueWithoutTagsInput {
  data: DesignUpdateWithoutTagsInput!
  where: DesignWhereUniqueInput!
}

input DesignUpdateWithoutBlogInput {
  comments: CommentUpdateManyWithoutDesignInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutDesignInput
  owner: UserUpdateOneRequiredWithoutDesignsInput
  reactions: ReactionUpdateManyWithoutDesignInput
  shares: ShareCountUpdateManyWithoutDesignInput
  tags: TagUpdateManyWithoutDesignsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateWithoutCommentsInput {
  blog: BlogUpdateOneRequiredWithoutDesignsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutDesignInput
  owner: UserUpdateOneRequiredWithoutDesignsInput
  reactions: ReactionUpdateManyWithoutDesignInput
  shares: ShareCountUpdateManyWithoutDesignInput
  tags: TagUpdateManyWithoutDesignsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateWithoutImagesInput {
  blog: BlogUpdateOneRequiredWithoutDesignsInput
  comments: CommentUpdateManyWithoutDesignInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutDesignsInput
  reactions: ReactionUpdateManyWithoutDesignInput
  shares: ShareCountUpdateManyWithoutDesignInput
  tags: TagUpdateManyWithoutDesignsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateWithoutOwnerInput {
  blog: BlogUpdateOneRequiredWithoutDesignsInput
  comments: CommentUpdateManyWithoutDesignInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutDesignInput
  reactions: ReactionUpdateManyWithoutDesignInput
  shares: ShareCountUpdateManyWithoutDesignInput
  tags: TagUpdateManyWithoutDesignsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateWithoutReactionsInput {
  blog: BlogUpdateOneRequiredWithoutDesignsInput
  comments: CommentUpdateManyWithoutDesignInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutDesignInput
  owner: UserUpdateOneRequiredWithoutDesignsInput
  shares: ShareCountUpdateManyWithoutDesignInput
  tags: TagUpdateManyWithoutDesignsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateWithoutSharesInput {
  blog: BlogUpdateOneRequiredWithoutDesignsInput
  comments: CommentUpdateManyWithoutDesignInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutDesignInput
  owner: UserUpdateOneRequiredWithoutDesignsInput
  reactions: ReactionUpdateManyWithoutDesignInput
  tags: TagUpdateManyWithoutDesignsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpdateWithoutTagsInput {
  blog: BlogUpdateOneRequiredWithoutDesignsInput
  comments: CommentUpdateManyWithoutDesignInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutDesignInput
  owner: UserUpdateOneRequiredWithoutDesignsInput
  reactions: ReactionUpdateManyWithoutDesignInput
  shares: ShareCountUpdateManyWithoutDesignInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input DesignUpsertWithWhereUniqueWithoutBlogInput {
  create: DesignCreateWithoutBlogInput!
  update: DesignUpdateWithoutBlogInput!
  where: DesignWhereUniqueInput!
}

input DesignUpsertWithWhereUniqueWithoutOwnerInput {
  create: DesignCreateWithoutOwnerInput!
  update: DesignUpdateWithoutOwnerInput!
  where: DesignWhereUniqueInput!
}

input DesignUpsertWithWhereUniqueWithoutTagsInput {
  create: DesignCreateWithoutTagsInput!
  update: DesignUpdateWithoutTagsInput!
  where: DesignWhereUniqueInput!
}

input DesignUpsertWithoutCommentsInput {
  create: DesignCreateWithoutCommentsInput!
  update: DesignUpdateWithoutCommentsInput!
}

input DesignUpsertWithoutImagesInput {
  create: DesignCreateWithoutImagesInput!
  update: DesignUpdateWithoutImagesInput!
}

input DesignUpsertWithoutReactionsInput {
  create: DesignCreateWithoutReactionsInput!
  update: DesignUpdateWithoutReactionsInput!
}

input DesignUpsertWithoutSharesInput {
  create: DesignCreateWithoutSharesInput!
  update: DesignUpdateWithoutSharesInput!
}

input DesignWhereInput {
  AND: [DesignWhereInput!]
  NOT: [DesignWhereInput!]
  OR: [DesignWhereInput!]
  blog: BlogWhereInput
  blogId: StringFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  editedAt: DateTimeNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  owner: UserWhereInput
  ownerId: StringFilter
  reactions: ReactionListRelationFilter
  shares: ShareCountListRelationFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  visibility: EnumVisibilityFilter
}

input DesignWhereUniqueInput {
  id: String
}

input EnumLanguageFieldUpdateOperationsInput {
  set: Language
}

input EnumLanguageFilter {
  equals: Language
  in: [Language!]
  not: NestedEnumLanguageFilter
  notIn: [Language!]
}

input EnumOAuthGrantNullableListFilter {
  equals: [OAuthGrant!]
  has: OAuthGrant
  hasEvery: [OAuthGrant!]
  hasSome: [OAuthGrant!]
  isEmpty: Boolean
}

input EnumOAuthProvidersNullableFilter {
  equals: OAuthProviders
  in: [OAuthProviders!]
  not: NestedEnumOAuthProvidersNullableFilter
  notIn: [OAuthProviders!]
}

input EnumShareTypeFieldUpdateOperationsInput {
  set: ShareType
}

input EnumShareTypeFilter {
  equals: ShareType
  in: [ShareType!]
  not: NestedEnumShareTypeFilter
  notIn: [ShareType!]
}

input EnumVisibilityFieldUpdateOperationsInput {
  set: Visibility
}

input EnumVisibilityFilter {
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityFilter
  notIn: [Visibility!]
}

type Image implements Node {
  alt: String
  createdAt: DateTime!
  height: Int

  """ID for a resource"""
  id: ID
  mainColor: String
  owner: User!
  secondaryColor: String
  updatedAt: DateTime!
  url: String!
  width: Int
}

type ImageConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ImageEdge]

  """Flattened list of Image type"""
  nodes: [Image]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input ImageCreateInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  paper: PaperCreateNestedOneWithoutImagesInput
  post: PostCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyCommentInput {
  alt: String
  createdAt: DateTime
  designId: String
  height: Int
  id: String
  mainColor: String
  ownerId: String!
  paperId: String
  postId: String
  projectId: String
  secondaryColor: String
  thoughtId: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyCommentInputEnvelope {
  data: [ImageCreateManyCommentInput!]
  skipDuplicates: Boolean
}

input ImageCreateManyDesignInput {
  alt: String
  commentId: String
  createdAt: DateTime
  height: Int
  id: String
  mainColor: String
  ownerId: String!
  paperId: String
  postId: String
  projectId: String
  secondaryColor: String
  thoughtId: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyDesignInputEnvelope {
  data: [ImageCreateManyDesignInput!]
  skipDuplicates: Boolean
}

input ImageCreateManyOwnerInput {
  alt: String
  commentId: String
  createdAt: DateTime
  designId: String
  height: Int
  id: String
  mainColor: String
  paperId: String
  postId: String
  projectId: String
  secondaryColor: String
  thoughtId: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyOwnerInputEnvelope {
  data: [ImageCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input ImageCreateManyPaperInput {
  alt: String
  commentId: String
  createdAt: DateTime
  designId: String
  height: Int
  id: String
  mainColor: String
  ownerId: String!
  postId: String
  projectId: String
  secondaryColor: String
  thoughtId: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyPaperInputEnvelope {
  data: [ImageCreateManyPaperInput!]
  skipDuplicates: Boolean
}

input ImageCreateManyPostInput {
  alt: String
  commentId: String
  createdAt: DateTime
  designId: String
  height: Int
  id: String
  mainColor: String
  ownerId: String!
  paperId: String
  projectId: String
  secondaryColor: String
  thoughtId: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyPostInputEnvelope {
  data: [ImageCreateManyPostInput!]
  skipDuplicates: Boolean
}

input ImageCreateManyProjectInput {
  alt: String
  commentId: String
  createdAt: DateTime
  designId: String
  height: Int
  id: String
  mainColor: String
  ownerId: String!
  paperId: String
  postId: String
  secondaryColor: String
  thoughtId: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyProjectInputEnvelope {
  data: [ImageCreateManyProjectInput!]
  skipDuplicates: Boolean
}

input ImageCreateManyThoughtInput {
  alt: String
  commentId: String
  createdAt: DateTime
  designId: String
  height: Int
  id: String
  mainColor: String
  ownerId: String!
  paperId: String
  postId: String
  projectId: String
  secondaryColor: String
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateManyThoughtInputEnvelope {
  data: [ImageCreateManyThoughtInput!]
  skipDuplicates: Boolean
}

input ImageCreateNestedManyWithoutCommentInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutCommentInput!]
  create: [ImageCreateWithoutCommentInput!]
  createMany: ImageCreateManyCommentInputEnvelope
}

input ImageCreateNestedManyWithoutDesignInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutDesignInput!]
  create: [ImageCreateWithoutDesignInput!]
  createMany: ImageCreateManyDesignInputEnvelope
}

input ImageCreateNestedManyWithoutOwnerInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutOwnerInput!]
  create: [ImageCreateWithoutOwnerInput!]
  createMany: ImageCreateManyOwnerInputEnvelope
}

input ImageCreateNestedManyWithoutPaperInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPaperInput!]
  create: [ImageCreateWithoutPaperInput!]
  createMany: ImageCreateManyPaperInputEnvelope
}

input ImageCreateNestedManyWithoutPostInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPostInput!]
  create: [ImageCreateWithoutPostInput!]
  createMany: ImageCreateManyPostInputEnvelope
}

input ImageCreateNestedManyWithoutProjectInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutProjectInput!]
  create: [ImageCreateWithoutProjectInput!]
  createMany: ImageCreateManyProjectInputEnvelope
}

input ImageCreateNestedManyWithoutThoughtInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutThoughtInput!]
  create: [ImageCreateWithoutThoughtInput!]
  createMany: ImageCreateManyThoughtInputEnvelope
}

input ImageCreateOrConnectWithoutCommentInput {
  create: ImageCreateWithoutCommentInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutDesignInput {
  create: ImageCreateWithoutDesignInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutOwnerInput {
  create: ImageCreateWithoutOwnerInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutPaperInput {
  create: ImageCreateWithoutPaperInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutPostInput {
  create: ImageCreateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutProjectInput {
  create: ImageCreateWithoutProjectInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutThoughtInput {
  create: ImageCreateWithoutThoughtInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutCommentInput {
  alt: String
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  paper: PaperCreateNestedOneWithoutImagesInput
  post: PostCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateWithoutDesignInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  paper: PaperCreateNestedOneWithoutImagesInput
  post: PostCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateWithoutOwnerInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  paper: PaperCreateNestedOneWithoutImagesInput
  post: PostCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateWithoutPaperInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  post: PostCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateWithoutPostInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  paper: PaperCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateWithoutProjectInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  paper: PaperCreateNestedOneWithoutImagesInput
  post: PostCreateNestedOneWithoutImagesInput
  secondaryColor: String
  thought: ThoughtCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageCreateWithoutThoughtInput {
  alt: String
  comment: CommentCreateNestedOneWithoutImagesInput
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutImagesInput
  height: Int
  id: String
  mainColor: String
  owner: UserCreateNestedOneWithoutImagesInput!
  paper: PaperCreateNestedOneWithoutImagesInput
  post: PostCreateNestedOneWithoutImagesInput
  project: ProjectCreateNestedOneWithoutImagesInput
  secondaryColor: String
  updatedAt: DateTime
  url: String!
  width: Int
}

type ImageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Image
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  alt: StringNullableFilter
  commentId: StringNullableFilter
  createdAt: DateTimeFilter
  designId: StringNullableFilter
  height: IntNullableFilter
  id: StringFilter
  mainColor: StringNullableFilter
  ownerId: StringFilter
  paperId: StringNullableFilter
  postId: StringNullableFilter
  projectId: StringNullableFilter
  secondaryColor: StringNullableFilter
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  width: IntNullableFilter
}

input ImageUpdateInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  paper: PaperUpdateOneWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateManyMutationInput {
  alt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutCommentInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutDesignInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutOwnerInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutPaperInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutPostInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutProjectInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutThoughtInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutCommentInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutCommentInput!]
  create: [ImageCreateWithoutCommentInput!]
  createMany: ImageCreateManyCommentInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutCommentInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutCommentInput!]
}

input ImageUpdateManyWithoutDesignInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutDesignInput!]
  create: [ImageCreateWithoutDesignInput!]
  createMany: ImageCreateManyDesignInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutDesignInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutDesignInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutDesignInput!]
}

input ImageUpdateManyWithoutOwnerInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutOwnerInput!]
  create: [ImageCreateWithoutOwnerInput!]
  createMany: ImageCreateManyOwnerInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ImageUpdateManyWithoutPaperInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPaperInput!]
  create: [ImageCreateWithoutPaperInput!]
  createMany: ImageCreateManyPaperInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutPaperInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutPaperInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutPaperInput!]
}

input ImageUpdateManyWithoutPostInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPostInput!]
  create: [ImageCreateWithoutPostInput!]
  createMany: ImageCreateManyPostInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutPostInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutPostInput!]
}

input ImageUpdateManyWithoutProjectInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutProjectInput!]
  create: [ImageCreateWithoutProjectInput!]
  createMany: ImageCreateManyProjectInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutProjectInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutProjectInput!]
}

input ImageUpdateManyWithoutThoughtInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutThoughtInput!]
  create: [ImageCreateWithoutThoughtInput!]
  createMany: ImageCreateManyThoughtInputEnvelope
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutThoughtInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutThoughtInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutThoughtInput!]
}

input ImageUpdateWithWhereUniqueWithoutCommentInput {
  data: ImageUpdateWithoutCommentInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutDesignInput {
  data: ImageUpdateWithoutDesignInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutOwnerInput {
  data: ImageUpdateWithoutOwnerInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutPaperInput {
  data: ImageUpdateWithoutPaperInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutPostInput {
  data: ImageUpdateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutProjectInput {
  data: ImageUpdateWithoutProjectInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutThoughtInput {
  data: ImageUpdateWithoutThoughtInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutCommentInput {
  alt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  paper: PaperUpdateOneWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateWithoutDesignInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  paper: PaperUpdateOneWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateWithoutOwnerInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateWithoutPaperInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateWithoutPostInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  paper: PaperUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateWithoutProjectInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  paper: PaperUpdateOneWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpdateWithoutThoughtInput {
  alt: NullableStringFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutImagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutImagesInput
  height: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutImagesInput
  paper: PaperUpdateOneWithoutImagesInput
  post: PostUpdateOneWithoutImagesInput
  project: ProjectUpdateOneWithoutImagesInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
}

input ImageUpsertWithWhereUniqueWithoutCommentInput {
  create: ImageCreateWithoutCommentInput!
  update: ImageUpdateWithoutCommentInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutDesignInput {
  create: ImageCreateWithoutDesignInput!
  update: ImageUpdateWithoutDesignInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutOwnerInput {
  create: ImageCreateWithoutOwnerInput!
  update: ImageUpdateWithoutOwnerInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutPaperInput {
  create: ImageCreateWithoutPaperInput!
  update: ImageUpdateWithoutPaperInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutPostInput {
  create: ImageCreateWithoutPostInput!
  update: ImageUpdateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutProjectInput {
  create: ImageCreateWithoutProjectInput!
  update: ImageUpdateWithoutProjectInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutThoughtInput {
  create: ImageCreateWithoutThoughtInput!
  update: ImageUpdateWithoutThoughtInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  alt: StringNullableFilter
  comment: CommentWhereInput
  commentId: StringNullableFilter
  createdAt: DateTimeFilter
  design: DesignWhereInput
  designId: StringNullableFilter
  height: IntNullableFilter
  id: StringFilter
  mainColor: StringNullableFilter
  owner: UserWhereInput
  ownerId: StringFilter
  paper: PaperWhereInput
  paperId: StringNullableFilter
  post: PostWhereInput
  postId: StringNullableFilter
  project: ProjectWhereInput
  projectId: StringNullableFilter
  secondaryColor: StringNullableFilter
  thought: ThoughtWhereInput
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  width: IntNullableFilter
}

input ImageWhereUniqueInput {
  id: String
  url: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

enum Language {
  aa
  ab
  ae
  af
  ak
  am
  an
  ar
  as
  av
  ay
  az
  ba
  be
  bg
  bh
  bi
  bm
  bn
  bo
  br
  bs
  ca
  ce
  ch
  co
  cr
  cs
  cu
  cv
  cy
  da
  de
  dv
  dz
  ee
  el
  en
  eo
  es
  et
  eu
  fa
  ff
  fi
  fj
  fo
  fr
  fy
  ga
  gd
  gl
  gn
  gu
  gv
  ha
  he
  hi
  ho
  hr
  ht
  hu
  hy
  hz
  ia
  id
  ie
  ig
  ii
  ik
  io
  is
  it
  iu
  ja
  jv
  ka
  kg
  ki
  kj
  kk
  kl
  km
  kn
  ko
  kr
  ks
  ku
  kv
  kw
  ky
  la
  lb
  lg
  li
  ln
  lo
  lt
  lu
  lv
  mg
  mh
  mi
  mk
  ml
  mn
  mr
  ms
  mt
  my
  na
  nb
  nd
  ne
  ng
  nl
  nn
  no
  nr
  nv
  ny
  oc
  oj
  om
  or
  os
  pa
  pi
  pl
  ps
  pt
  qu
  rm
  rn
  ro
  ru
  rw
  sa
  sc
  sd
  se
  sg
  si
  sk
  sl
  sm
  sn
  so
  sq
  sr
  ss
  st
  su
  sv
  sw
  ta
  te
  tg
  th
  ti
  tk
  tl
  tn
  to
  tr
  ts
  tt
  tw
  ty
  ug
  uk
  ur
  uz
  ve
  vi
  vo
  wa
  wo
  xh
  yi
  yo
  za
  zh
  zu
}

type Link implements Node {
  createdAt: DateTime!
  iconUrl: String

  """ID for a resource"""
  id: ID
  updatedAt: DateTime!
  url: String!
}

type LinkConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [LinkEdge]

  """Flattened list of Link type"""
  nodes: [Link]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input LinkCreateInput {
  blog: BlogCreateNestedOneWithoutLinksInput!
  createdAt: DateTime
  iconUrl: String
  id: String
  updatedAt: DateTime
  url: String!
}

input LinkCreateManyBlogInput {
  createdAt: DateTime
  iconUrl: String
  id: String
  updatedAt: DateTime
  url: String!
}

input LinkCreateManyBlogInputEnvelope {
  data: [LinkCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input LinkCreateNestedManyWithoutBlogInput {
  connect: [LinkWhereUniqueInput!]
  connectOrCreate: [LinkCreateOrConnectWithoutBlogInput!]
  create: [LinkCreateWithoutBlogInput!]
  createMany: LinkCreateManyBlogInputEnvelope
}

input LinkCreateOrConnectWithoutBlogInput {
  create: LinkCreateWithoutBlogInput!
  where: LinkWhereUniqueInput!
}

input LinkCreateWithoutBlogInput {
  createdAt: DateTime
  iconUrl: String
  id: String
  updatedAt: DateTime
  url: String!
}

type LinkEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Link
}

input LinkListRelationFilter {
  every: LinkWhereInput
  none: LinkWhereInput
  some: LinkWhereInput
}

input LinkScalarWhereInput {
  AND: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  blogId: StringFilter
  createdAt: DateTimeFilter
  iconUrl: StringNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input LinkUpdateInput {
  blog: BlogUpdateOneRequiredWithoutLinksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input LinkUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input LinkUpdateManyWithWhereWithoutBlogInput {
  data: LinkUpdateManyMutationInput!
  where: LinkScalarWhereInput!
}

input LinkUpdateManyWithoutBlogInput {
  connect: [LinkWhereUniqueInput!]
  connectOrCreate: [LinkCreateOrConnectWithoutBlogInput!]
  create: [LinkCreateWithoutBlogInput!]
  createMany: LinkCreateManyBlogInputEnvelope
  delete: [LinkWhereUniqueInput!]
  deleteMany: [LinkScalarWhereInput!]
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [LinkUpdateManyWithWhereWithoutBlogInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutBlogInput!]
}

input LinkUpdateWithWhereUniqueWithoutBlogInput {
  data: LinkUpdateWithoutBlogInput!
  where: LinkWhereUniqueInput!
}

input LinkUpdateWithoutBlogInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input LinkUpsertWithWhereUniqueWithoutBlogInput {
  create: LinkCreateWithoutBlogInput!
  update: LinkUpdateWithoutBlogInput!
  where: LinkWhereUniqueInput!
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  blog: BlogWhereInput
  blogId: StringFilter
  createdAt: DateTimeFilter
  iconUrl: StringNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input LinkWhereUniqueInput {
  id: String
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  error: String
  ok: Boolean!
}

type Mutation {
  LoginMutation(LoginInput: LoginInput!): LoginResponse
  creatCommentMutation(content: String!, parentId: String!): creatCommentResponse
  creatPostMutation(createPostInput: createPostInput!): creatPostResponse
  createOneComment(data: CommentCreateInput!): Comment!
  createOneImage(data: ImageCreateInput!): Image!
  createOneLink(data: LinkCreateInput!): Link!
  createOnePaper(data: PaperCreateInput!): Paper!
  createOnePost(data: PostCreateInput!): Post!
  createOneProject(data: ProjectCreateInput!): Project!
  createOneRating(data: RatingCreateInput!): Rating!
  createOneReaction(data: ReactionCreateInput!): Reaction!
  createOneShareCount(data: ShareCountCreateInput!): ShareCount!
  createOneTag(data: TagCreateInput!): Tag!
  createOneThought(data: ThoughtCreateInput!): Thought!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyImage(where: ImageWhereInput): AffectedRowsOutput!
  deleteManyLink(where: LinkWhereInput): AffectedRowsOutput!
  deleteManyPaper(where: PaperWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyProject(where: ProjectWhereInput): AffectedRowsOutput!
  deleteManyRating(where: RatingWhereInput): AffectedRowsOutput!
  deleteManyReaction(where: ReactionWhereInput): AffectedRowsOutput!
  deleteManyShareCount(where: ShareCountWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyThought(where: ThoughtWhereInput): AffectedRowsOutput!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneImage(where: ImageWhereUniqueInput!): Image
  deleteOneLink(where: LinkWhereUniqueInput!): Link
  deleteOnePaper(where: PaperWhereUniqueInput!): Paper
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneRating(where: RatingWhereUniqueInput!): Rating
  deleteOneReaction(where: ReactionWhereUniqueInput!): Reaction
  deleteOneShareCount(where: ShareCountWhereUniqueInput!): ShareCount
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneThought(where: ThoughtWhereUniqueInput!): Thought
  subscribe(blogId: String!, email: String!, firstName: String!): Boolean
  unsubscribe(email: String!): Boolean
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyImage(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): AffectedRowsOutput!
  updateManyLink(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): AffectedRowsOutput!
  updateManyPaper(data: PaperUpdateManyMutationInput!, where: PaperWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): AffectedRowsOutput!
  updateManyRating(data: RatingUpdateManyMutationInput!, where: RatingWhereInput): AffectedRowsOutput!
  updateManyReaction(data: ReactionUpdateManyMutationInput!, where: ReactionWhereInput): AffectedRowsOutput!
  updateManyShareCount(data: ShareCountUpdateManyMutationInput!, where: ShareCountWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyThought(data: ThoughtUpdateManyMutationInput!, where: ThoughtWhereInput): AffectedRowsOutput!
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateOneLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateOnePaper(data: PaperUpdateInput!, where: PaperWhereUniqueInput!): Paper
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateOneReaction(data: ReactionUpdateInput!, where: ReactionWhereUniqueInput!): Reaction
  updateOneShareCount(data: ShareCountUpdateInput!, where: ShareCountWhereUniqueInput!): ShareCount
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneThought(data: ThoughtUpdateInput!, where: ThoughtWhereUniqueInput!): Thought
  uploadImages(files: [Upload!]!): [Image]!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneImage(create: ImageCreateInput!, update: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  upsertOneLink(create: LinkCreateInput!, update: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link!
  upsertOnePaper(create: PaperCreateInput!, update: PaperUpdateInput!, where: PaperWhereUniqueInput!): Paper!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertOneRating(create: RatingCreateInput!, update: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating!
  upsertOneReaction(create: ReactionCreateInput!, update: ReactionUpdateInput!, where: ReactionWhereUniqueInput!): Reaction!
  upsertOneShareCount(create: ShareCountCreateInput!, update: ShareCountUpdateInput!, where: ShareCountWhereUniqueInput!): ShareCount!
  upsertOneTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertOneThought(create: ThoughtCreateInput!, update: ThoughtUpdateInput!, where: ThoughtWhereUniqueInput!): Thought!
  viewPost(id: String, slug: String): Void
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumLanguageFilter {
  equals: Language
  in: [Language!]
  not: NestedEnumLanguageFilter
  notIn: [Language!]
}

input NestedEnumOAuthProvidersNullableFilter {
  equals: OAuthProviders
  in: [OAuthProviders!]
  not: NestedEnumOAuthProvidersNullableFilter
  notIn: [OAuthProviders!]
}

input NestedEnumShareTypeFilter {
  equals: ShareType
  in: [ShareType!]
  not: NestedEnumShareTypeFilter
  notIn: [ShareType!]
}

input NestedEnumVisibilityFilter {
  equals: Visibility
  in: [Visibility!]
  not: NestedEnumVisibilityFilter
  notIn: [Visibility!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

interface Node {
  """ID for a resource"""
  id: ID
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumOAuthProvidersFieldUpdateOperationsInput {
  set: OAuthProviders
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input OAuthAccessTokenCreateManyClientInput {
  accessToken: String!
  accessTokenExpiresAt: DateTime!
  createdAt: DateTime
  userId: String!
}

input OAuthAccessTokenCreateManyClientInputEnvelope {
  data: [OAuthAccessTokenCreateManyClientInput!]
  skipDuplicates: Boolean
}

input OAuthAccessTokenCreateManyUserInput {
  accessToken: String!
  accessTokenExpiresAt: DateTime!
  clientId: String!
  createdAt: DateTime
}

input OAuthAccessTokenCreateManyUserInputEnvelope {
  data: [OAuthAccessTokenCreateManyUserInput!]
  skipDuplicates: Boolean
}

input OAuthAccessTokenCreateNestedManyWithoutClientInput {
  connect: [OAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [OAuthAccessTokenCreateOrConnectWithoutClientInput!]
  create: [OAuthAccessTokenCreateWithoutClientInput!]
  createMany: OAuthAccessTokenCreateManyClientInputEnvelope
}

input OAuthAccessTokenCreateNestedManyWithoutScopesInput {
  connect: [OAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [OAuthAccessTokenCreateOrConnectWithoutScopesInput!]
  create: [OAuthAccessTokenCreateWithoutScopesInput!]
}

input OAuthAccessTokenCreateNestedManyWithoutUserInput {
  connect: [OAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [OAuthAccessTokenCreateOrConnectWithoutUserInput!]
  create: [OAuthAccessTokenCreateWithoutUserInput!]
  createMany: OAuthAccessTokenCreateManyUserInputEnvelope
}

input OAuthAccessTokenCreateOrConnectWithoutClientInput {
  create: OAuthAccessTokenCreateWithoutClientInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenCreateOrConnectWithoutScopesInput {
  create: OAuthAccessTokenCreateWithoutScopesInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenCreateOrConnectWithoutUserInput {
  create: OAuthAccessTokenCreateWithoutUserInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenCreateWithoutClientInput {
  accessToken: String!
  accessTokenExpiresAt: DateTime!
  createdAt: DateTime
  scopes: OAuthScopeCreateNestedManyWithoutAccessTokensInput
  user: UserCreateNestedOneWithoutAccessTokensInput!
}

input OAuthAccessTokenCreateWithoutScopesInput {
  accessToken: String!
  accessTokenExpiresAt: DateTime!
  client: OAuthClientCreateNestedOneWithoutAccessTokensInput!
  createdAt: DateTime
  user: UserCreateNestedOneWithoutAccessTokensInput!
}

input OAuthAccessTokenCreateWithoutUserInput {
  accessToken: String!
  accessTokenExpiresAt: DateTime!
  client: OAuthClientCreateNestedOneWithoutAccessTokensInput!
  createdAt: DateTime
  scopes: OAuthScopeCreateNestedManyWithoutAccessTokensInput
}

input OAuthAccessTokenListRelationFilter {
  every: OAuthAccessTokenWhereInput
  none: OAuthAccessTokenWhereInput
  some: OAuthAccessTokenWhereInput
}

input OAuthAccessTokenScalarWhereInput {
  AND: [OAuthAccessTokenScalarWhereInput!]
  NOT: [OAuthAccessTokenScalarWhereInput!]
  OR: [OAuthAccessTokenScalarWhereInput!]
  accessToken: StringFilter
  accessTokenExpiresAt: DateTimeFilter
  clientId: StringFilter
  createdAt: DateTimeFilter
  userId: StringFilter
}

input OAuthAccessTokenUpdateManyMutationInput {
  accessToken: StringFieldUpdateOperationsInput
  accessTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input OAuthAccessTokenUpdateManyWithWhereWithoutClientInput {
  data: OAuthAccessTokenUpdateManyMutationInput!
  where: OAuthAccessTokenScalarWhereInput!
}

input OAuthAccessTokenUpdateManyWithWhereWithoutScopesInput {
  data: OAuthAccessTokenUpdateManyMutationInput!
  where: OAuthAccessTokenScalarWhereInput!
}

input OAuthAccessTokenUpdateManyWithWhereWithoutUserInput {
  data: OAuthAccessTokenUpdateManyMutationInput!
  where: OAuthAccessTokenScalarWhereInput!
}

input OAuthAccessTokenUpdateManyWithoutClientInput {
  connect: [OAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [OAuthAccessTokenCreateOrConnectWithoutClientInput!]
  create: [OAuthAccessTokenCreateWithoutClientInput!]
  createMany: OAuthAccessTokenCreateManyClientInputEnvelope
  delete: [OAuthAccessTokenWhereUniqueInput!]
  deleteMany: [OAuthAccessTokenScalarWhereInput!]
  disconnect: [OAuthAccessTokenWhereUniqueInput!]
  set: [OAuthAccessTokenWhereUniqueInput!]
  update: [OAuthAccessTokenUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [OAuthAccessTokenUpdateManyWithWhereWithoutClientInput!]
  upsert: [OAuthAccessTokenUpsertWithWhereUniqueWithoutClientInput!]
}

input OAuthAccessTokenUpdateManyWithoutScopesInput {
  connect: [OAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [OAuthAccessTokenCreateOrConnectWithoutScopesInput!]
  create: [OAuthAccessTokenCreateWithoutScopesInput!]
  delete: [OAuthAccessTokenWhereUniqueInput!]
  deleteMany: [OAuthAccessTokenScalarWhereInput!]
  disconnect: [OAuthAccessTokenWhereUniqueInput!]
  set: [OAuthAccessTokenWhereUniqueInput!]
  update: [OAuthAccessTokenUpdateWithWhereUniqueWithoutScopesInput!]
  updateMany: [OAuthAccessTokenUpdateManyWithWhereWithoutScopesInput!]
  upsert: [OAuthAccessTokenUpsertWithWhereUniqueWithoutScopesInput!]
}

input OAuthAccessTokenUpdateManyWithoutUserInput {
  connect: [OAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [OAuthAccessTokenCreateOrConnectWithoutUserInput!]
  create: [OAuthAccessTokenCreateWithoutUserInput!]
  createMany: OAuthAccessTokenCreateManyUserInputEnvelope
  delete: [OAuthAccessTokenWhereUniqueInput!]
  deleteMany: [OAuthAccessTokenScalarWhereInput!]
  disconnect: [OAuthAccessTokenWhereUniqueInput!]
  set: [OAuthAccessTokenWhereUniqueInput!]
  update: [OAuthAccessTokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OAuthAccessTokenUpdateManyWithWhereWithoutUserInput!]
  upsert: [OAuthAccessTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input OAuthAccessTokenUpdateWithWhereUniqueWithoutClientInput {
  data: OAuthAccessTokenUpdateWithoutClientInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenUpdateWithWhereUniqueWithoutScopesInput {
  data: OAuthAccessTokenUpdateWithoutScopesInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenUpdateWithWhereUniqueWithoutUserInput {
  data: OAuthAccessTokenUpdateWithoutUserInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenUpdateWithoutClientInput {
  accessToken: StringFieldUpdateOperationsInput
  accessTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutAccessTokensInput
  user: UserUpdateOneRequiredWithoutAccessTokensInput
}

input OAuthAccessTokenUpdateWithoutScopesInput {
  accessToken: StringFieldUpdateOperationsInput
  accessTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  client: OAuthClientUpdateOneRequiredWithoutAccessTokensInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccessTokensInput
}

input OAuthAccessTokenUpdateWithoutUserInput {
  accessToken: StringFieldUpdateOperationsInput
  accessTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  client: OAuthClientUpdateOneRequiredWithoutAccessTokensInput
  createdAt: DateTimeFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutAccessTokensInput
}

input OAuthAccessTokenUpsertWithWhereUniqueWithoutClientInput {
  create: OAuthAccessTokenCreateWithoutClientInput!
  update: OAuthAccessTokenUpdateWithoutClientInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenUpsertWithWhereUniqueWithoutScopesInput {
  create: OAuthAccessTokenCreateWithoutScopesInput!
  update: OAuthAccessTokenUpdateWithoutScopesInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenUpsertWithWhereUniqueWithoutUserInput {
  create: OAuthAccessTokenCreateWithoutUserInput!
  update: OAuthAccessTokenUpdateWithoutUserInput!
  where: OAuthAccessTokenWhereUniqueInput!
}

input OAuthAccessTokenWhereInput {
  AND: [OAuthAccessTokenWhereInput!]
  NOT: [OAuthAccessTokenWhereInput!]
  OR: [OAuthAccessTokenWhereInput!]
  accessToken: StringFilter
  accessTokenExpiresAt: DateTimeFilter
  client: OAuthClientWhereInput
  clientId: StringFilter
  createdAt: DateTimeFilter
  scopes: OAuthScopeListRelationFilter
  user: UserWhereInput
  userId: StringFilter
}

input OAuthAccessTokenWhereUniqueInput {
  accessToken: String
}

input OAuthAuthorizationCodeCreateManyClientInput {
  authorizationCode: String!
  createdAt: DateTime
  expiresAt: DateTime!
  redirectUri: String
  userId: String!
}

input OAuthAuthorizationCodeCreateManyClientInputEnvelope {
  data: [OAuthAuthorizationCodeCreateManyClientInput!]
  skipDuplicates: Boolean
}

input OAuthAuthorizationCodeCreateManyUserInput {
  authorizationCode: String!
  clientId: String!
  createdAt: DateTime
  expiresAt: DateTime!
  redirectUri: String
}

input OAuthAuthorizationCodeCreateManyUserInputEnvelope {
  data: [OAuthAuthorizationCodeCreateManyUserInput!]
  skipDuplicates: Boolean
}

input OAuthAuthorizationCodeCreateNestedManyWithoutClientInput {
  connect: [OAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [OAuthAuthorizationCodeCreateOrConnectWithoutClientInput!]
  create: [OAuthAuthorizationCodeCreateWithoutClientInput!]
  createMany: OAuthAuthorizationCodeCreateManyClientInputEnvelope
}

input OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput {
  connect: [OAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [OAuthAuthorizationCodeCreateOrConnectWithoutScopesInput!]
  create: [OAuthAuthorizationCodeCreateWithoutScopesInput!]
}

input OAuthAuthorizationCodeCreateNestedManyWithoutUserInput {
  connect: [OAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [OAuthAuthorizationCodeCreateOrConnectWithoutUserInput!]
  create: [OAuthAuthorizationCodeCreateWithoutUserInput!]
  createMany: OAuthAuthorizationCodeCreateManyUserInputEnvelope
}

input OAuthAuthorizationCodeCreateOrConnectWithoutClientInput {
  create: OAuthAuthorizationCodeCreateWithoutClientInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeCreateOrConnectWithoutScopesInput {
  create: OAuthAuthorizationCodeCreateWithoutScopesInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeCreateOrConnectWithoutUserInput {
  create: OAuthAuthorizationCodeCreateWithoutUserInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeCreateWithoutClientInput {
  authorizationCode: String!
  createdAt: DateTime
  expiresAt: DateTime!
  redirectUri: String
  scopes: OAuthScopeCreateNestedManyWithoutAuthorizationCodesInput
  user: UserCreateNestedOneWithoutOAuthAuthorizationCodesInput!
}

input OAuthAuthorizationCodeCreateWithoutScopesInput {
  authorizationCode: String!
  client: OAuthClientCreateNestedOneWithoutAuthorizationCodesInput!
  createdAt: DateTime
  expiresAt: DateTime!
  redirectUri: String
  user: UserCreateNestedOneWithoutOAuthAuthorizationCodesInput!
}

input OAuthAuthorizationCodeCreateWithoutUserInput {
  authorizationCode: String!
  client: OAuthClientCreateNestedOneWithoutAuthorizationCodesInput!
  createdAt: DateTime
  expiresAt: DateTime!
  redirectUri: String
  scopes: OAuthScopeCreateNestedManyWithoutAuthorizationCodesInput
}

input OAuthAuthorizationCodeListRelationFilter {
  every: OAuthAuthorizationCodeWhereInput
  none: OAuthAuthorizationCodeWhereInput
  some: OAuthAuthorizationCodeWhereInput
}

input OAuthAuthorizationCodeScalarWhereInput {
  AND: [OAuthAuthorizationCodeScalarWhereInput!]
  NOT: [OAuthAuthorizationCodeScalarWhereInput!]
  OR: [OAuthAuthorizationCodeScalarWhereInput!]
  authorizationCode: StringFilter
  clientId: StringFilter
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  redirectUri: StringNullableFilter
  userId: StringFilter
}

input OAuthAuthorizationCodeUpdateManyMutationInput {
  authorizationCode: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  redirectUri: NullableStringFieldUpdateOperationsInput
}

input OAuthAuthorizationCodeUpdateManyWithWhereWithoutClientInput {
  data: OAuthAuthorizationCodeUpdateManyMutationInput!
  where: OAuthAuthorizationCodeScalarWhereInput!
}

input OAuthAuthorizationCodeUpdateManyWithWhereWithoutScopesInput {
  data: OAuthAuthorizationCodeUpdateManyMutationInput!
  where: OAuthAuthorizationCodeScalarWhereInput!
}

input OAuthAuthorizationCodeUpdateManyWithWhereWithoutUserInput {
  data: OAuthAuthorizationCodeUpdateManyMutationInput!
  where: OAuthAuthorizationCodeScalarWhereInput!
}

input OAuthAuthorizationCodeUpdateManyWithoutClientInput {
  connect: [OAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [OAuthAuthorizationCodeCreateOrConnectWithoutClientInput!]
  create: [OAuthAuthorizationCodeCreateWithoutClientInput!]
  createMany: OAuthAuthorizationCodeCreateManyClientInputEnvelope
  delete: [OAuthAuthorizationCodeWhereUniqueInput!]
  deleteMany: [OAuthAuthorizationCodeScalarWhereInput!]
  disconnect: [OAuthAuthorizationCodeWhereUniqueInput!]
  set: [OAuthAuthorizationCodeWhereUniqueInput!]
  update: [OAuthAuthorizationCodeUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [OAuthAuthorizationCodeUpdateManyWithWhereWithoutClientInput!]
  upsert: [OAuthAuthorizationCodeUpsertWithWhereUniqueWithoutClientInput!]
}

input OAuthAuthorizationCodeUpdateManyWithoutScopesInput {
  connect: [OAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [OAuthAuthorizationCodeCreateOrConnectWithoutScopesInput!]
  create: [OAuthAuthorizationCodeCreateWithoutScopesInput!]
  delete: [OAuthAuthorizationCodeWhereUniqueInput!]
  deleteMany: [OAuthAuthorizationCodeScalarWhereInput!]
  disconnect: [OAuthAuthorizationCodeWhereUniqueInput!]
  set: [OAuthAuthorizationCodeWhereUniqueInput!]
  update: [OAuthAuthorizationCodeUpdateWithWhereUniqueWithoutScopesInput!]
  updateMany: [OAuthAuthorizationCodeUpdateManyWithWhereWithoutScopesInput!]
  upsert: [OAuthAuthorizationCodeUpsertWithWhereUniqueWithoutScopesInput!]
}

input OAuthAuthorizationCodeUpdateManyWithoutUserInput {
  connect: [OAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [OAuthAuthorizationCodeCreateOrConnectWithoutUserInput!]
  create: [OAuthAuthorizationCodeCreateWithoutUserInput!]
  createMany: OAuthAuthorizationCodeCreateManyUserInputEnvelope
  delete: [OAuthAuthorizationCodeWhereUniqueInput!]
  deleteMany: [OAuthAuthorizationCodeScalarWhereInput!]
  disconnect: [OAuthAuthorizationCodeWhereUniqueInput!]
  set: [OAuthAuthorizationCodeWhereUniqueInput!]
  update: [OAuthAuthorizationCodeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OAuthAuthorizationCodeUpdateManyWithWhereWithoutUserInput!]
  upsert: [OAuthAuthorizationCodeUpsertWithWhereUniqueWithoutUserInput!]
}

input OAuthAuthorizationCodeUpdateWithWhereUniqueWithoutClientInput {
  data: OAuthAuthorizationCodeUpdateWithoutClientInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeUpdateWithWhereUniqueWithoutScopesInput {
  data: OAuthAuthorizationCodeUpdateWithoutScopesInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeUpdateWithWhereUniqueWithoutUserInput {
  data: OAuthAuthorizationCodeUpdateWithoutUserInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeUpdateWithoutClientInput {
  authorizationCode: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  redirectUri: NullableStringFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutAuthorizationCodesInput
  user: UserUpdateOneRequiredWithoutOAuthAuthorizationCodesInput
}

input OAuthAuthorizationCodeUpdateWithoutScopesInput {
  authorizationCode: StringFieldUpdateOperationsInput
  client: OAuthClientUpdateOneRequiredWithoutAuthorizationCodesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  redirectUri: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutOAuthAuthorizationCodesInput
}

input OAuthAuthorizationCodeUpdateWithoutUserInput {
  authorizationCode: StringFieldUpdateOperationsInput
  client: OAuthClientUpdateOneRequiredWithoutAuthorizationCodesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  redirectUri: NullableStringFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutAuthorizationCodesInput
}

input OAuthAuthorizationCodeUpsertWithWhereUniqueWithoutClientInput {
  create: OAuthAuthorizationCodeCreateWithoutClientInput!
  update: OAuthAuthorizationCodeUpdateWithoutClientInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeUpsertWithWhereUniqueWithoutScopesInput {
  create: OAuthAuthorizationCodeCreateWithoutScopesInput!
  update: OAuthAuthorizationCodeUpdateWithoutScopesInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeUpsertWithWhereUniqueWithoutUserInput {
  create: OAuthAuthorizationCodeCreateWithoutUserInput!
  update: OAuthAuthorizationCodeUpdateWithoutUserInput!
  where: OAuthAuthorizationCodeWhereUniqueInput!
}

input OAuthAuthorizationCodeWhereInput {
  AND: [OAuthAuthorizationCodeWhereInput!]
  NOT: [OAuthAuthorizationCodeWhereInput!]
  OR: [OAuthAuthorizationCodeWhereInput!]
  authorizationCode: StringFilter
  client: OAuthClientWhereInput
  clientId: StringFilter
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  redirectUri: StringNullableFilter
  scopes: OAuthScopeListRelationFilter
  user: UserWhereInput
  userId: StringFilter
}

input OAuthAuthorizationCodeWhereUniqueInput {
  authorizationCode: String
}

input OAuthClientCreateManyOwnerInput {
  accessTokenLifetime: Int
  createdAt: DateTime
  grants: OAuthClientCreateManygrantsInput
  id: String!
  redirectUris: OAuthClientCreateManyredirectUrisInput
  refreshTokenLifetime: Int
  secret: String!
  updatedAt: DateTime
}

input OAuthClientCreateManyOwnerInputEnvelope {
  data: [OAuthClientCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input OAuthClientCreateManygrantsInput {
  set: [OAuthGrant!]
}

input OAuthClientCreateManyredirectUrisInput {
  set: [String!]
}

input OAuthClientCreateNestedManyWithoutOwnerInput {
  connect: [OAuthClientWhereUniqueInput!]
  connectOrCreate: [OAuthClientCreateOrConnectWithoutOwnerInput!]
  create: [OAuthClientCreateWithoutOwnerInput!]
  createMany: OAuthClientCreateManyOwnerInputEnvelope
}

input OAuthClientCreateNestedManyWithoutScopesInput {
  connect: [OAuthClientWhereUniqueInput!]
  connectOrCreate: [OAuthClientCreateOrConnectWithoutScopesInput!]
  create: [OAuthClientCreateWithoutScopesInput!]
}

input OAuthClientCreateNestedOneWithoutAccessTokensInput {
  connect: OAuthClientWhereUniqueInput
  connectOrCreate: OAuthClientCreateOrConnectWithoutAccessTokensInput
  create: OAuthClientCreateWithoutAccessTokensInput
}

input OAuthClientCreateNestedOneWithoutAuthorizationCodesInput {
  connect: OAuthClientWhereUniqueInput
  connectOrCreate: OAuthClientCreateOrConnectWithoutAuthorizationCodesInput
  create: OAuthClientCreateWithoutAuthorizationCodesInput
}

input OAuthClientCreateNestedOneWithoutRefreshTokensInput {
  connect: OAuthClientWhereUniqueInput
  connectOrCreate: OAuthClientCreateOrConnectWithoutRefreshTokensInput
  create: OAuthClientCreateWithoutRefreshTokensInput
}

input OAuthClientCreateOrConnectWithoutAccessTokensInput {
  create: OAuthClientCreateWithoutAccessTokensInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientCreateOrConnectWithoutAuthorizationCodesInput {
  create: OAuthClientCreateWithoutAuthorizationCodesInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientCreateOrConnectWithoutOwnerInput {
  create: OAuthClientCreateWithoutOwnerInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientCreateOrConnectWithoutRefreshTokensInput {
  create: OAuthClientCreateWithoutRefreshTokensInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientCreateOrConnectWithoutScopesInput {
  create: OAuthClientCreateWithoutScopesInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientCreateWithoutAccessTokensInput {
  accessTokenLifetime: Int
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutClientInput
  createdAt: DateTime
  grants: OAuthClientCreategrantsInput
  id: String!
  owner: UserCreateNestedOneWithoutOAuthClientsInput!
  redirectUris: OAuthClientCreateredirectUrisInput
  refreshTokenLifetime: Int
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutClientInput
  scopes: OAuthScopeCreateNestedManyWithoutClientsInput
  secret: String!
  updatedAt: DateTime
}

input OAuthClientCreateWithoutAuthorizationCodesInput {
  accessTokenLifetime: Int
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutClientInput
  createdAt: DateTime
  grants: OAuthClientCreategrantsInput
  id: String!
  owner: UserCreateNestedOneWithoutOAuthClientsInput!
  redirectUris: OAuthClientCreateredirectUrisInput
  refreshTokenLifetime: Int
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutClientInput
  scopes: OAuthScopeCreateNestedManyWithoutClientsInput
  secret: String!
  updatedAt: DateTime
}

input OAuthClientCreateWithoutOwnerInput {
  accessTokenLifetime: Int
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutClientInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutClientInput
  createdAt: DateTime
  grants: OAuthClientCreategrantsInput
  id: String!
  redirectUris: OAuthClientCreateredirectUrisInput
  refreshTokenLifetime: Int
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutClientInput
  scopes: OAuthScopeCreateNestedManyWithoutClientsInput
  secret: String!
  updatedAt: DateTime
}

input OAuthClientCreateWithoutRefreshTokensInput {
  accessTokenLifetime: Int
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutClientInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutClientInput
  createdAt: DateTime
  grants: OAuthClientCreategrantsInput
  id: String!
  owner: UserCreateNestedOneWithoutOAuthClientsInput!
  redirectUris: OAuthClientCreateredirectUrisInput
  refreshTokenLifetime: Int
  scopes: OAuthScopeCreateNestedManyWithoutClientsInput
  secret: String!
  updatedAt: DateTime
}

input OAuthClientCreateWithoutScopesInput {
  accessTokenLifetime: Int
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutClientInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutClientInput
  createdAt: DateTime
  grants: OAuthClientCreategrantsInput
  id: String!
  owner: UserCreateNestedOneWithoutOAuthClientsInput!
  redirectUris: OAuthClientCreateredirectUrisInput
  refreshTokenLifetime: Int
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutClientInput
  secret: String!
  updatedAt: DateTime
}

input OAuthClientCreategrantsInput {
  set: [OAuthGrant!]
}

input OAuthClientCreateredirectUrisInput {
  set: [String!]
}

input OAuthClientListRelationFilter {
  every: OAuthClientWhereInput
  none: OAuthClientWhereInput
  some: OAuthClientWhereInput
}

input OAuthClientScalarWhereInput {
  AND: [OAuthClientScalarWhereInput!]
  NOT: [OAuthClientScalarWhereInput!]
  OR: [OAuthClientScalarWhereInput!]
  accessTokenLifetime: IntNullableFilter
  createdAt: DateTimeFilter
  grants: EnumOAuthGrantNullableListFilter
  id: StringFilter
  ownerId: StringFilter
  redirectUris: StringNullableListFilter
  refreshTokenLifetime: IntNullableFilter
  secret: StringFilter
  updatedAt: DateTimeFilter
}

input OAuthClientUpdateManyMutationInput {
  accessTokenLifetime: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grants: OAuthClientUpdategrantsInput
  id: StringFieldUpdateOperationsInput
  redirectUris: OAuthClientUpdateredirectUrisInput
  refreshTokenLifetime: NullableIntFieldUpdateOperationsInput
  secret: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OAuthClientUpdateManyWithWhereWithoutOwnerInput {
  data: OAuthClientUpdateManyMutationInput!
  where: OAuthClientScalarWhereInput!
}

input OAuthClientUpdateManyWithWhereWithoutScopesInput {
  data: OAuthClientUpdateManyMutationInput!
  where: OAuthClientScalarWhereInput!
}

input OAuthClientUpdateManyWithoutOwnerInput {
  connect: [OAuthClientWhereUniqueInput!]
  connectOrCreate: [OAuthClientCreateOrConnectWithoutOwnerInput!]
  create: [OAuthClientCreateWithoutOwnerInput!]
  createMany: OAuthClientCreateManyOwnerInputEnvelope
  delete: [OAuthClientWhereUniqueInput!]
  deleteMany: [OAuthClientScalarWhereInput!]
  disconnect: [OAuthClientWhereUniqueInput!]
  set: [OAuthClientWhereUniqueInput!]
  update: [OAuthClientUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [OAuthClientUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [OAuthClientUpsertWithWhereUniqueWithoutOwnerInput!]
}

input OAuthClientUpdateManyWithoutScopesInput {
  connect: [OAuthClientWhereUniqueInput!]
  connectOrCreate: [OAuthClientCreateOrConnectWithoutScopesInput!]
  create: [OAuthClientCreateWithoutScopesInput!]
  delete: [OAuthClientWhereUniqueInput!]
  deleteMany: [OAuthClientScalarWhereInput!]
  disconnect: [OAuthClientWhereUniqueInput!]
  set: [OAuthClientWhereUniqueInput!]
  update: [OAuthClientUpdateWithWhereUniqueWithoutScopesInput!]
  updateMany: [OAuthClientUpdateManyWithWhereWithoutScopesInput!]
  upsert: [OAuthClientUpsertWithWhereUniqueWithoutScopesInput!]
}

input OAuthClientUpdateOneRequiredWithoutAccessTokensInput {
  connect: OAuthClientWhereUniqueInput
  connectOrCreate: OAuthClientCreateOrConnectWithoutAccessTokensInput
  create: OAuthClientCreateWithoutAccessTokensInput
  update: OAuthClientUpdateWithoutAccessTokensInput
  upsert: OAuthClientUpsertWithoutAccessTokensInput
}

input OAuthClientUpdateOneRequiredWithoutAuthorizationCodesInput {
  connect: OAuthClientWhereUniqueInput
  connectOrCreate: OAuthClientCreateOrConnectWithoutAuthorizationCodesInput
  create: OAuthClientCreateWithoutAuthorizationCodesInput
  update: OAuthClientUpdateWithoutAuthorizationCodesInput
  upsert: OAuthClientUpsertWithoutAuthorizationCodesInput
}

input OAuthClientUpdateOneRequiredWithoutRefreshTokensInput {
  connect: OAuthClientWhereUniqueInput
  connectOrCreate: OAuthClientCreateOrConnectWithoutRefreshTokensInput
  create: OAuthClientCreateWithoutRefreshTokensInput
  update: OAuthClientUpdateWithoutRefreshTokensInput
  upsert: OAuthClientUpsertWithoutRefreshTokensInput
}

input OAuthClientUpdateWithWhereUniqueWithoutOwnerInput {
  data: OAuthClientUpdateWithoutOwnerInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientUpdateWithWhereUniqueWithoutScopesInput {
  data: OAuthClientUpdateWithoutScopesInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientUpdateWithoutAccessTokensInput {
  accessTokenLifetime: NullableIntFieldUpdateOperationsInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grants: OAuthClientUpdategrantsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOAuthClientsInput
  redirectUris: OAuthClientUpdateredirectUrisInput
  refreshTokenLifetime: NullableIntFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutClientInput
  scopes: OAuthScopeUpdateManyWithoutClientsInput
  secret: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OAuthClientUpdateWithoutAuthorizationCodesInput {
  accessTokenLifetime: NullableIntFieldUpdateOperationsInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grants: OAuthClientUpdategrantsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOAuthClientsInput
  redirectUris: OAuthClientUpdateredirectUrisInput
  refreshTokenLifetime: NullableIntFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutClientInput
  scopes: OAuthScopeUpdateManyWithoutClientsInput
  secret: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OAuthClientUpdateWithoutOwnerInput {
  accessTokenLifetime: NullableIntFieldUpdateOperationsInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutClientInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grants: OAuthClientUpdategrantsInput
  id: StringFieldUpdateOperationsInput
  redirectUris: OAuthClientUpdateredirectUrisInput
  refreshTokenLifetime: NullableIntFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutClientInput
  scopes: OAuthScopeUpdateManyWithoutClientsInput
  secret: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OAuthClientUpdateWithoutRefreshTokensInput {
  accessTokenLifetime: NullableIntFieldUpdateOperationsInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutClientInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grants: OAuthClientUpdategrantsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOAuthClientsInput
  redirectUris: OAuthClientUpdateredirectUrisInput
  refreshTokenLifetime: NullableIntFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutClientsInput
  secret: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OAuthClientUpdateWithoutScopesInput {
  accessTokenLifetime: NullableIntFieldUpdateOperationsInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutClientInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grants: OAuthClientUpdategrantsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOAuthClientsInput
  redirectUris: OAuthClientUpdateredirectUrisInput
  refreshTokenLifetime: NullableIntFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutClientInput
  secret: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OAuthClientUpdategrantsInput {
  push: OAuthGrant
  set: [OAuthGrant!]
}

input OAuthClientUpdateredirectUrisInput {
  push: String
  set: [String!]
}

input OAuthClientUpsertWithWhereUniqueWithoutOwnerInput {
  create: OAuthClientCreateWithoutOwnerInput!
  update: OAuthClientUpdateWithoutOwnerInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientUpsertWithWhereUniqueWithoutScopesInput {
  create: OAuthClientCreateWithoutScopesInput!
  update: OAuthClientUpdateWithoutScopesInput!
  where: OAuthClientWhereUniqueInput!
}

input OAuthClientUpsertWithoutAccessTokensInput {
  create: OAuthClientCreateWithoutAccessTokensInput!
  update: OAuthClientUpdateWithoutAccessTokensInput!
}

input OAuthClientUpsertWithoutAuthorizationCodesInput {
  create: OAuthClientCreateWithoutAuthorizationCodesInput!
  update: OAuthClientUpdateWithoutAuthorizationCodesInput!
}

input OAuthClientUpsertWithoutRefreshTokensInput {
  create: OAuthClientCreateWithoutRefreshTokensInput!
  update: OAuthClientUpdateWithoutRefreshTokensInput!
}

input OAuthClientWhereInput {
  AND: [OAuthClientWhereInput!]
  NOT: [OAuthClientWhereInput!]
  OR: [OAuthClientWhereInput!]
  accessTokenLifetime: IntNullableFilter
  accessTokens: OAuthAccessTokenListRelationFilter
  authorizationCodes: OAuthAuthorizationCodeListRelationFilter
  createdAt: DateTimeFilter
  grants: EnumOAuthGrantNullableListFilter
  id: StringFilter
  owner: UserWhereInput
  ownerId: StringFilter
  redirectUris: StringNullableListFilter
  refreshTokenLifetime: IntNullableFilter
  refreshTokens: OAuthRefreshTokenListRelationFilter
  scopes: OAuthScopeListRelationFilter
  secret: StringFilter
  updatedAt: DateTimeFilter
}

input OAuthClientWhereUniqueInput {
  id: String
  secret: String
}

enum OAuthGrant {
  authorization_code
  client_credentials
  password
  refresh_token
}

enum OAuthProviders {
  disqus
  github
  google
  reddit
}

input OAuthRefreshTokenCreateManyClientInput {
  createdAt: DateTime
  refreshToken: String!
  refreshTokenExpiresAt: DateTime!
  userId: String!
}

input OAuthRefreshTokenCreateManyClientInputEnvelope {
  data: [OAuthRefreshTokenCreateManyClientInput!]
  skipDuplicates: Boolean
}

input OAuthRefreshTokenCreateManyUserInput {
  clientId: String!
  createdAt: DateTime
  refreshToken: String!
  refreshTokenExpiresAt: DateTime!
}

input OAuthRefreshTokenCreateManyUserInputEnvelope {
  data: [OAuthRefreshTokenCreateManyUserInput!]
  skipDuplicates: Boolean
}

input OAuthRefreshTokenCreateNestedManyWithoutClientInput {
  connect: [OAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [OAuthRefreshTokenCreateOrConnectWithoutClientInput!]
  create: [OAuthRefreshTokenCreateWithoutClientInput!]
  createMany: OAuthRefreshTokenCreateManyClientInputEnvelope
}

input OAuthRefreshTokenCreateNestedManyWithoutScopesInput {
  connect: [OAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [OAuthRefreshTokenCreateOrConnectWithoutScopesInput!]
  create: [OAuthRefreshTokenCreateWithoutScopesInput!]
}

input OAuthRefreshTokenCreateNestedManyWithoutUserInput {
  connect: [OAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [OAuthRefreshTokenCreateOrConnectWithoutUserInput!]
  create: [OAuthRefreshTokenCreateWithoutUserInput!]
  createMany: OAuthRefreshTokenCreateManyUserInputEnvelope
}

input OAuthRefreshTokenCreateOrConnectWithoutClientInput {
  create: OAuthRefreshTokenCreateWithoutClientInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenCreateOrConnectWithoutScopesInput {
  create: OAuthRefreshTokenCreateWithoutScopesInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenCreateOrConnectWithoutUserInput {
  create: OAuthRefreshTokenCreateWithoutUserInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenCreateWithoutClientInput {
  createdAt: DateTime
  refreshToken: String!
  refreshTokenExpiresAt: DateTime!
  scopes: OAuthScopeCreateNestedManyWithoutRefreshTokensInput
  user: UserCreateNestedOneWithoutRefreshTokensInput!
}

input OAuthRefreshTokenCreateWithoutScopesInput {
  client: OAuthClientCreateNestedOneWithoutRefreshTokensInput!
  createdAt: DateTime
  refreshToken: String!
  refreshTokenExpiresAt: DateTime!
  user: UserCreateNestedOneWithoutRefreshTokensInput!
}

input OAuthRefreshTokenCreateWithoutUserInput {
  client: OAuthClientCreateNestedOneWithoutRefreshTokensInput!
  createdAt: DateTime
  refreshToken: String!
  refreshTokenExpiresAt: DateTime!
  scopes: OAuthScopeCreateNestedManyWithoutRefreshTokensInput
}

input OAuthRefreshTokenListRelationFilter {
  every: OAuthRefreshTokenWhereInput
  none: OAuthRefreshTokenWhereInput
  some: OAuthRefreshTokenWhereInput
}

input OAuthRefreshTokenScalarWhereInput {
  AND: [OAuthRefreshTokenScalarWhereInput!]
  NOT: [OAuthRefreshTokenScalarWhereInput!]
  OR: [OAuthRefreshTokenScalarWhereInput!]
  clientId: StringFilter
  createdAt: DateTimeFilter
  refreshToken: StringFilter
  refreshTokenExpiresAt: DateTimeFilter
  userId: StringFilter
}

input OAuthRefreshTokenUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  refreshToken: StringFieldUpdateOperationsInput
  refreshTokenExpiresAt: DateTimeFieldUpdateOperationsInput
}

input OAuthRefreshTokenUpdateManyWithWhereWithoutClientInput {
  data: OAuthRefreshTokenUpdateManyMutationInput!
  where: OAuthRefreshTokenScalarWhereInput!
}

input OAuthRefreshTokenUpdateManyWithWhereWithoutScopesInput {
  data: OAuthRefreshTokenUpdateManyMutationInput!
  where: OAuthRefreshTokenScalarWhereInput!
}

input OAuthRefreshTokenUpdateManyWithWhereWithoutUserInput {
  data: OAuthRefreshTokenUpdateManyMutationInput!
  where: OAuthRefreshTokenScalarWhereInput!
}

input OAuthRefreshTokenUpdateManyWithoutClientInput {
  connect: [OAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [OAuthRefreshTokenCreateOrConnectWithoutClientInput!]
  create: [OAuthRefreshTokenCreateWithoutClientInput!]
  createMany: OAuthRefreshTokenCreateManyClientInputEnvelope
  delete: [OAuthRefreshTokenWhereUniqueInput!]
  deleteMany: [OAuthRefreshTokenScalarWhereInput!]
  disconnect: [OAuthRefreshTokenWhereUniqueInput!]
  set: [OAuthRefreshTokenWhereUniqueInput!]
  update: [OAuthRefreshTokenUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [OAuthRefreshTokenUpdateManyWithWhereWithoutClientInput!]
  upsert: [OAuthRefreshTokenUpsertWithWhereUniqueWithoutClientInput!]
}

input OAuthRefreshTokenUpdateManyWithoutScopesInput {
  connect: [OAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [OAuthRefreshTokenCreateOrConnectWithoutScopesInput!]
  create: [OAuthRefreshTokenCreateWithoutScopesInput!]
  delete: [OAuthRefreshTokenWhereUniqueInput!]
  deleteMany: [OAuthRefreshTokenScalarWhereInput!]
  disconnect: [OAuthRefreshTokenWhereUniqueInput!]
  set: [OAuthRefreshTokenWhereUniqueInput!]
  update: [OAuthRefreshTokenUpdateWithWhereUniqueWithoutScopesInput!]
  updateMany: [OAuthRefreshTokenUpdateManyWithWhereWithoutScopesInput!]
  upsert: [OAuthRefreshTokenUpsertWithWhereUniqueWithoutScopesInput!]
}

input OAuthRefreshTokenUpdateManyWithoutUserInput {
  connect: [OAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [OAuthRefreshTokenCreateOrConnectWithoutUserInput!]
  create: [OAuthRefreshTokenCreateWithoutUserInput!]
  createMany: OAuthRefreshTokenCreateManyUserInputEnvelope
  delete: [OAuthRefreshTokenWhereUniqueInput!]
  deleteMany: [OAuthRefreshTokenScalarWhereInput!]
  disconnect: [OAuthRefreshTokenWhereUniqueInput!]
  set: [OAuthRefreshTokenWhereUniqueInput!]
  update: [OAuthRefreshTokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OAuthRefreshTokenUpdateManyWithWhereWithoutUserInput!]
  upsert: [OAuthRefreshTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input OAuthRefreshTokenUpdateWithWhereUniqueWithoutClientInput {
  data: OAuthRefreshTokenUpdateWithoutClientInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenUpdateWithWhereUniqueWithoutScopesInput {
  data: OAuthRefreshTokenUpdateWithoutScopesInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenUpdateWithWhereUniqueWithoutUserInput {
  data: OAuthRefreshTokenUpdateWithoutUserInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenUpdateWithoutClientInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  refreshToken: StringFieldUpdateOperationsInput
  refreshTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutRefreshTokensInput
  user: UserUpdateOneRequiredWithoutRefreshTokensInput
}

input OAuthRefreshTokenUpdateWithoutScopesInput {
  client: OAuthClientUpdateOneRequiredWithoutRefreshTokensInput
  createdAt: DateTimeFieldUpdateOperationsInput
  refreshToken: StringFieldUpdateOperationsInput
  refreshTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRefreshTokensInput
}

input OAuthRefreshTokenUpdateWithoutUserInput {
  client: OAuthClientUpdateOneRequiredWithoutRefreshTokensInput
  createdAt: DateTimeFieldUpdateOperationsInput
  refreshToken: StringFieldUpdateOperationsInput
  refreshTokenExpiresAt: DateTimeFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutRefreshTokensInput
}

input OAuthRefreshTokenUpsertWithWhereUniqueWithoutClientInput {
  create: OAuthRefreshTokenCreateWithoutClientInput!
  update: OAuthRefreshTokenUpdateWithoutClientInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenUpsertWithWhereUniqueWithoutScopesInput {
  create: OAuthRefreshTokenCreateWithoutScopesInput!
  update: OAuthRefreshTokenUpdateWithoutScopesInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenUpsertWithWhereUniqueWithoutUserInput {
  create: OAuthRefreshTokenCreateWithoutUserInput!
  update: OAuthRefreshTokenUpdateWithoutUserInput!
  where: OAuthRefreshTokenWhereUniqueInput!
}

input OAuthRefreshTokenWhereInput {
  AND: [OAuthRefreshTokenWhereInput!]
  NOT: [OAuthRefreshTokenWhereInput!]
  OR: [OAuthRefreshTokenWhereInput!]
  client: OAuthClientWhereInput
  clientId: StringFilter
  createdAt: DateTimeFilter
  refreshToken: StringFilter
  refreshTokenExpiresAt: DateTimeFilter
  scopes: OAuthScopeListRelationFilter
  user: UserWhereInput
  userId: StringFilter
}

input OAuthRefreshTokenWhereUniqueInput {
  refreshToken: String
}

input OAuthScopeCreateManyParentInput {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateManyParentInputEnvelope {
  data: [OAuthScopeCreateManyParentInput!]
  skipDuplicates: Boolean
}

input OAuthScopeCreateNestedManyWithoutAccessTokensInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutAccessTokensInput!]
  create: [OAuthScopeCreateWithoutAccessTokensInput!]
}

input OAuthScopeCreateNestedManyWithoutAuthorizationCodesInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutAuthorizationCodesInput!]
  create: [OAuthScopeCreateWithoutAuthorizationCodesInput!]
}

input OAuthScopeCreateNestedManyWithoutClientsInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutClientsInput!]
  create: [OAuthScopeCreateWithoutClientsInput!]
}

input OAuthScopeCreateNestedManyWithoutParentInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutParentInput!]
  create: [OAuthScopeCreateWithoutParentInput!]
  createMany: OAuthScopeCreateManyParentInputEnvelope
}

input OAuthScopeCreateNestedManyWithoutRefreshTokensInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutRefreshTokensInput!]
  create: [OAuthScopeCreateWithoutRefreshTokensInput!]
}

input OAuthScopeCreateNestedManyWithoutRolesInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutRolesInput!]
  create: [OAuthScopeCreateWithoutRolesInput!]
}

input OAuthScopeCreateNestedOneWithoutChildScopesInput {
  connect: OAuthScopeWhereUniqueInput
  connectOrCreate: OAuthScopeCreateOrConnectWithoutChildScopesInput
  create: OAuthScopeCreateWithoutChildScopesInput
}

input OAuthScopeCreateOrConnectWithoutAccessTokensInput {
  create: OAuthScopeCreateWithoutAccessTokensInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateOrConnectWithoutAuthorizationCodesInput {
  create: OAuthScopeCreateWithoutAuthorizationCodesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateOrConnectWithoutChildScopesInput {
  create: OAuthScopeCreateWithoutChildScopesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateOrConnectWithoutClientsInput {
  create: OAuthScopeCreateWithoutClientsInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateOrConnectWithoutParentInput {
  create: OAuthScopeCreateWithoutParentInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateOrConnectWithoutRefreshTokensInput {
  create: OAuthScopeCreateWithoutRefreshTokensInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateOrConnectWithoutRolesInput {
  create: OAuthScopeCreateWithoutRolesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeCreateWithoutAccessTokensInput {
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput
  childScopes: OAuthScopeCreateNestedManyWithoutParentInput
  clients: OAuthClientCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  name: String!
  parent: OAuthScopeCreateNestedOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutScopesInput
  roles: UserRoleCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateWithoutAuthorizationCodesInput {
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutScopesInput
  childScopes: OAuthScopeCreateNestedManyWithoutParentInput
  clients: OAuthClientCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  name: String!
  parent: OAuthScopeCreateNestedOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutScopesInput
  roles: UserRoleCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateWithoutChildScopesInput {
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput
  clients: OAuthClientCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  name: String!
  parent: OAuthScopeCreateNestedOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutScopesInput
  roles: UserRoleCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateWithoutClientsInput {
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput
  childScopes: OAuthScopeCreateNestedManyWithoutParentInput
  createdAt: DateTime
  description: String
  name: String!
  parent: OAuthScopeCreateNestedOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutScopesInput
  roles: UserRoleCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateWithoutParentInput {
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput
  childScopes: OAuthScopeCreateNestedManyWithoutParentInput
  clients: OAuthClientCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  name: String!
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutScopesInput
  roles: UserRoleCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateWithoutRefreshTokensInput {
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput
  childScopes: OAuthScopeCreateNestedManyWithoutParentInput
  clients: OAuthClientCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  name: String!
  parent: OAuthScopeCreateNestedOneWithoutChildScopesInput
  roles: UserRoleCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeCreateWithoutRolesInput {
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutScopesInput
  childScopes: OAuthScopeCreateNestedManyWithoutParentInput
  clients: OAuthClientCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  name: String!
  parent: OAuthScopeCreateNestedOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutScopesInput
  updatedAt: DateTime
  value: String!
}

input OAuthScopeListRelationFilter {
  every: OAuthScopeWhereInput
  none: OAuthScopeWhereInput
  some: OAuthScopeWhereInput
}

input OAuthScopeScalarWhereInput {
  AND: [OAuthScopeScalarWhereInput!]
  NOT: [OAuthScopeScalarWhereInput!]
  OR: [OAuthScopeScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  name: StringFilter
  parentValue: StringNullableFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input OAuthScopeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateManyWithWhereWithoutAccessTokensInput {
  data: OAuthScopeUpdateManyMutationInput!
  where: OAuthScopeScalarWhereInput!
}

input OAuthScopeUpdateManyWithWhereWithoutAuthorizationCodesInput {
  data: OAuthScopeUpdateManyMutationInput!
  where: OAuthScopeScalarWhereInput!
}

input OAuthScopeUpdateManyWithWhereWithoutClientsInput {
  data: OAuthScopeUpdateManyMutationInput!
  where: OAuthScopeScalarWhereInput!
}

input OAuthScopeUpdateManyWithWhereWithoutParentInput {
  data: OAuthScopeUpdateManyMutationInput!
  where: OAuthScopeScalarWhereInput!
}

input OAuthScopeUpdateManyWithWhereWithoutRefreshTokensInput {
  data: OAuthScopeUpdateManyMutationInput!
  where: OAuthScopeScalarWhereInput!
}

input OAuthScopeUpdateManyWithWhereWithoutRolesInput {
  data: OAuthScopeUpdateManyMutationInput!
  where: OAuthScopeScalarWhereInput!
}

input OAuthScopeUpdateManyWithoutAccessTokensInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutAccessTokensInput!]
  create: [OAuthScopeCreateWithoutAccessTokensInput!]
  delete: [OAuthScopeWhereUniqueInput!]
  deleteMany: [OAuthScopeScalarWhereInput!]
  disconnect: [OAuthScopeWhereUniqueInput!]
  set: [OAuthScopeWhereUniqueInput!]
  update: [OAuthScopeUpdateWithWhereUniqueWithoutAccessTokensInput!]
  updateMany: [OAuthScopeUpdateManyWithWhereWithoutAccessTokensInput!]
  upsert: [OAuthScopeUpsertWithWhereUniqueWithoutAccessTokensInput!]
}

input OAuthScopeUpdateManyWithoutAuthorizationCodesInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutAuthorizationCodesInput!]
  create: [OAuthScopeCreateWithoutAuthorizationCodesInput!]
  delete: [OAuthScopeWhereUniqueInput!]
  deleteMany: [OAuthScopeScalarWhereInput!]
  disconnect: [OAuthScopeWhereUniqueInput!]
  set: [OAuthScopeWhereUniqueInput!]
  update: [OAuthScopeUpdateWithWhereUniqueWithoutAuthorizationCodesInput!]
  updateMany: [OAuthScopeUpdateManyWithWhereWithoutAuthorizationCodesInput!]
  upsert: [OAuthScopeUpsertWithWhereUniqueWithoutAuthorizationCodesInput!]
}

input OAuthScopeUpdateManyWithoutClientsInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutClientsInput!]
  create: [OAuthScopeCreateWithoutClientsInput!]
  delete: [OAuthScopeWhereUniqueInput!]
  deleteMany: [OAuthScopeScalarWhereInput!]
  disconnect: [OAuthScopeWhereUniqueInput!]
  set: [OAuthScopeWhereUniqueInput!]
  update: [OAuthScopeUpdateWithWhereUniqueWithoutClientsInput!]
  updateMany: [OAuthScopeUpdateManyWithWhereWithoutClientsInput!]
  upsert: [OAuthScopeUpsertWithWhereUniqueWithoutClientsInput!]
}

input OAuthScopeUpdateManyWithoutParentInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutParentInput!]
  create: [OAuthScopeCreateWithoutParentInput!]
  createMany: OAuthScopeCreateManyParentInputEnvelope
  delete: [OAuthScopeWhereUniqueInput!]
  deleteMany: [OAuthScopeScalarWhereInput!]
  disconnect: [OAuthScopeWhereUniqueInput!]
  set: [OAuthScopeWhereUniqueInput!]
  update: [OAuthScopeUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [OAuthScopeUpdateManyWithWhereWithoutParentInput!]
  upsert: [OAuthScopeUpsertWithWhereUniqueWithoutParentInput!]
}

input OAuthScopeUpdateManyWithoutRefreshTokensInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutRefreshTokensInput!]
  create: [OAuthScopeCreateWithoutRefreshTokensInput!]
  delete: [OAuthScopeWhereUniqueInput!]
  deleteMany: [OAuthScopeScalarWhereInput!]
  disconnect: [OAuthScopeWhereUniqueInput!]
  set: [OAuthScopeWhereUniqueInput!]
  update: [OAuthScopeUpdateWithWhereUniqueWithoutRefreshTokensInput!]
  updateMany: [OAuthScopeUpdateManyWithWhereWithoutRefreshTokensInput!]
  upsert: [OAuthScopeUpsertWithWhereUniqueWithoutRefreshTokensInput!]
}

input OAuthScopeUpdateManyWithoutRolesInput {
  connect: [OAuthScopeWhereUniqueInput!]
  connectOrCreate: [OAuthScopeCreateOrConnectWithoutRolesInput!]
  create: [OAuthScopeCreateWithoutRolesInput!]
  delete: [OAuthScopeWhereUniqueInput!]
  deleteMany: [OAuthScopeScalarWhereInput!]
  disconnect: [OAuthScopeWhereUniqueInput!]
  set: [OAuthScopeWhereUniqueInput!]
  update: [OAuthScopeUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [OAuthScopeUpdateManyWithWhereWithoutRolesInput!]
  upsert: [OAuthScopeUpsertWithWhereUniqueWithoutRolesInput!]
}

input OAuthScopeUpdateOneWithoutChildScopesInput {
  connect: OAuthScopeWhereUniqueInput
  connectOrCreate: OAuthScopeCreateOrConnectWithoutChildScopesInput
  create: OAuthScopeCreateWithoutChildScopesInput
  delete: Boolean
  disconnect: Boolean
  update: OAuthScopeUpdateWithoutChildScopesInput
  upsert: OAuthScopeUpsertWithoutChildScopesInput
}

input OAuthScopeUpdateWithWhereUniqueWithoutAccessTokensInput {
  data: OAuthScopeUpdateWithoutAccessTokensInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpdateWithWhereUniqueWithoutAuthorizationCodesInput {
  data: OAuthScopeUpdateWithoutAuthorizationCodesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpdateWithWhereUniqueWithoutClientsInput {
  data: OAuthScopeUpdateWithoutClientsInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpdateWithWhereUniqueWithoutParentInput {
  data: OAuthScopeUpdateWithoutParentInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpdateWithWhereUniqueWithoutRefreshTokensInput {
  data: OAuthScopeUpdateWithoutRefreshTokensInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpdateWithWhereUniqueWithoutRolesInput {
  data: OAuthScopeUpdateWithoutRolesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpdateWithoutAccessTokensInput {
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutScopesInput
  childScopes: OAuthScopeUpdateManyWithoutParentInput
  clients: OAuthClientUpdateManyWithoutScopesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: OAuthScopeUpdateOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutScopesInput
  roles: UserRoleUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateWithoutAuthorizationCodesInput {
  accessTokens: OAuthAccessTokenUpdateManyWithoutScopesInput
  childScopes: OAuthScopeUpdateManyWithoutParentInput
  clients: OAuthClientUpdateManyWithoutScopesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: OAuthScopeUpdateOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutScopesInput
  roles: UserRoleUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateWithoutChildScopesInput {
  accessTokens: OAuthAccessTokenUpdateManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutScopesInput
  clients: OAuthClientUpdateManyWithoutScopesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: OAuthScopeUpdateOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutScopesInput
  roles: UserRoleUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateWithoutClientsInput {
  accessTokens: OAuthAccessTokenUpdateManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutScopesInput
  childScopes: OAuthScopeUpdateManyWithoutParentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: OAuthScopeUpdateOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutScopesInput
  roles: UserRoleUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateWithoutParentInput {
  accessTokens: OAuthAccessTokenUpdateManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutScopesInput
  childScopes: OAuthScopeUpdateManyWithoutParentInput
  clients: OAuthClientUpdateManyWithoutScopesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutScopesInput
  roles: UserRoleUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateWithoutRefreshTokensInput {
  accessTokens: OAuthAccessTokenUpdateManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutScopesInput
  childScopes: OAuthScopeUpdateManyWithoutParentInput
  clients: OAuthClientUpdateManyWithoutScopesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: OAuthScopeUpdateOneWithoutChildScopesInput
  roles: UserRoleUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpdateWithoutRolesInput {
  accessTokens: OAuthAccessTokenUpdateManyWithoutScopesInput
  authorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutScopesInput
  childScopes: OAuthScopeUpdateManyWithoutParentInput
  clients: OAuthClientUpdateManyWithoutScopesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent: OAuthScopeUpdateOneWithoutChildScopesInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutScopesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input OAuthScopeUpsertWithWhereUniqueWithoutAccessTokensInput {
  create: OAuthScopeCreateWithoutAccessTokensInput!
  update: OAuthScopeUpdateWithoutAccessTokensInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpsertWithWhereUniqueWithoutAuthorizationCodesInput {
  create: OAuthScopeCreateWithoutAuthorizationCodesInput!
  update: OAuthScopeUpdateWithoutAuthorizationCodesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpsertWithWhereUniqueWithoutClientsInput {
  create: OAuthScopeCreateWithoutClientsInput!
  update: OAuthScopeUpdateWithoutClientsInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpsertWithWhereUniqueWithoutParentInput {
  create: OAuthScopeCreateWithoutParentInput!
  update: OAuthScopeUpdateWithoutParentInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpsertWithWhereUniqueWithoutRefreshTokensInput {
  create: OAuthScopeCreateWithoutRefreshTokensInput!
  update: OAuthScopeUpdateWithoutRefreshTokensInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpsertWithWhereUniqueWithoutRolesInput {
  create: OAuthScopeCreateWithoutRolesInput!
  update: OAuthScopeUpdateWithoutRolesInput!
  where: OAuthScopeWhereUniqueInput!
}

input OAuthScopeUpsertWithoutChildScopesInput {
  create: OAuthScopeCreateWithoutChildScopesInput!
  update: OAuthScopeUpdateWithoutChildScopesInput!
}

input OAuthScopeWhereInput {
  AND: [OAuthScopeWhereInput!]
  NOT: [OAuthScopeWhereInput!]
  OR: [OAuthScopeWhereInput!]
  accessTokens: OAuthAccessTokenListRelationFilter
  authorizationCodes: OAuthAuthorizationCodeListRelationFilter
  childScopes: OAuthScopeListRelationFilter
  clients: OAuthClientListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  name: StringFilter
  parent: OAuthScopeWhereInput
  parentValue: StringNullableFilter
  refreshTokens: OAuthRefreshTokenListRelationFilter
  roles: UserRoleListRelationFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input OAuthScopeWhereUniqueInput {
  value: String
}

input OrderBy {
  key: String!
  order: sortOrder
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Paper implements Node {
  abstract: String
  content: String!
  createdAt: DateTime!
  headerImageUrl: String

  """ID for a resource"""
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  imagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  name: String!
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  reactionsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ReactionConnection
  renderedContent: Json!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  tagsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TagConnection
  updatedAt: DateTime!
  url: String
  visibility: Visibility!
}

type PaperConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [PaperEdge]

  """Flattened list of Paper type"""
  nodes: [Paper]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input PaperCreateInput {
  blog: BlogCreateNestedOneWithoutPapersInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPaperInput
  name: String!
  owner: UserCreateNestedOneWithoutPapersInput!
  ratings: RatingCreateNestedManyWithoutPaperInput
  reactions: ReactionCreateNestedManyWithoutPaperInput
  tags: TagCreateNestedManyWithoutPapersInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateManyBlogInput {
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  name: String!
  ownerId: String!
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateManyBlogInputEnvelope {
  data: [PaperCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input PaperCreateManyOwnerInput {
  blogId: String
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  name: String!
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateManyOwnerInputEnvelope {
  data: [PaperCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input PaperCreateNestedManyWithoutBlogInput {
  connect: [PaperWhereUniqueInput!]
  connectOrCreate: [PaperCreateOrConnectWithoutBlogInput!]
  create: [PaperCreateWithoutBlogInput!]
  createMany: PaperCreateManyBlogInputEnvelope
}

input PaperCreateNestedManyWithoutOwnerInput {
  connect: [PaperWhereUniqueInput!]
  connectOrCreate: [PaperCreateOrConnectWithoutOwnerInput!]
  create: [PaperCreateWithoutOwnerInput!]
  createMany: PaperCreateManyOwnerInputEnvelope
}

input PaperCreateNestedManyWithoutTagsInput {
  connect: [PaperWhereUniqueInput!]
  connectOrCreate: [PaperCreateOrConnectWithoutTagsInput!]
  create: [PaperCreateWithoutTagsInput!]
}

input PaperCreateNestedOneWithoutImagesInput {
  connect: PaperWhereUniqueInput
  connectOrCreate: PaperCreateOrConnectWithoutImagesInput
  create: PaperCreateWithoutImagesInput
}

input PaperCreateNestedOneWithoutRatingsInput {
  connect: PaperWhereUniqueInput
  connectOrCreate: PaperCreateOrConnectWithoutRatingsInput
  create: PaperCreateWithoutRatingsInput
}

input PaperCreateNestedOneWithoutReactionsInput {
  connect: PaperWhereUniqueInput
  connectOrCreate: PaperCreateOrConnectWithoutReactionsInput
  create: PaperCreateWithoutReactionsInput
}

input PaperCreateOrConnectWithoutBlogInput {
  create: PaperCreateWithoutBlogInput!
  where: PaperWhereUniqueInput!
}

input PaperCreateOrConnectWithoutImagesInput {
  create: PaperCreateWithoutImagesInput!
  where: PaperWhereUniqueInput!
}

input PaperCreateOrConnectWithoutOwnerInput {
  create: PaperCreateWithoutOwnerInput!
  where: PaperWhereUniqueInput!
}

input PaperCreateOrConnectWithoutRatingsInput {
  create: PaperCreateWithoutRatingsInput!
  where: PaperWhereUniqueInput!
}

input PaperCreateOrConnectWithoutReactionsInput {
  create: PaperCreateWithoutReactionsInput!
  where: PaperWhereUniqueInput!
}

input PaperCreateOrConnectWithoutTagsInput {
  create: PaperCreateWithoutTagsInput!
  where: PaperWhereUniqueInput!
}

input PaperCreateWithoutBlogInput {
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPaperInput
  name: String!
  owner: UserCreateNestedOneWithoutPapersInput!
  ratings: RatingCreateNestedManyWithoutPaperInput
  reactions: ReactionCreateNestedManyWithoutPaperInput
  tags: TagCreateNestedManyWithoutPapersInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateWithoutImagesInput {
  blog: BlogCreateNestedOneWithoutPapersInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutPapersInput!
  ratings: RatingCreateNestedManyWithoutPaperInput
  reactions: ReactionCreateNestedManyWithoutPaperInput
  tags: TagCreateNestedManyWithoutPapersInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateWithoutOwnerInput {
  blog: BlogCreateNestedOneWithoutPapersInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPaperInput
  name: String!
  ratings: RatingCreateNestedManyWithoutPaperInput
  reactions: ReactionCreateNestedManyWithoutPaperInput
  tags: TagCreateNestedManyWithoutPapersInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateWithoutRatingsInput {
  blog: BlogCreateNestedOneWithoutPapersInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPaperInput
  name: String!
  owner: UserCreateNestedOneWithoutPapersInput!
  reactions: ReactionCreateNestedManyWithoutPaperInput
  tags: TagCreateNestedManyWithoutPapersInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateWithoutReactionsInput {
  blog: BlogCreateNestedOneWithoutPapersInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPaperInput
  name: String!
  owner: UserCreateNestedOneWithoutPapersInput!
  ratings: RatingCreateNestedManyWithoutPaperInput
  tags: TagCreateNestedManyWithoutPapersInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input PaperCreateWithoutTagsInput {
  blog: BlogCreateNestedOneWithoutPapersInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPaperInput
  name: String!
  owner: UserCreateNestedOneWithoutPapersInput!
  ratings: RatingCreateNestedManyWithoutPaperInput
  reactions: ReactionCreateNestedManyWithoutPaperInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

type PaperEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Paper
}

input PaperListRelationFilter {
  every: PaperWhereInput
  none: PaperWhereInput
  some: PaperWhereInput
}

input PaperScalarWhereInput {
  AND: [PaperScalarWhereInput!]
  NOT: [PaperScalarWhereInput!]
  OR: [PaperScalarWhereInput!]
  blogId: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  headerImageUrl: StringNullableFilter
  id: StringFilter
  name: StringFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
  url: StringNullableFilter
  visibility: EnumVisibilityFilter
}

input PaperUpdateInput {
  blog: BlogUpdateOneWithoutPapersInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPaperInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPapersInput
  ratings: RatingUpdateManyWithoutPaperInput
  reactions: ReactionUpdateManyWithoutPaperInput
  tags: TagUpdateManyWithoutPapersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateManyWithWhereWithoutBlogInput {
  data: PaperUpdateManyMutationInput!
  where: PaperScalarWhereInput!
}

input PaperUpdateManyWithWhereWithoutOwnerInput {
  data: PaperUpdateManyMutationInput!
  where: PaperScalarWhereInput!
}

input PaperUpdateManyWithWhereWithoutTagsInput {
  data: PaperUpdateManyMutationInput!
  where: PaperScalarWhereInput!
}

input PaperUpdateManyWithoutBlogInput {
  connect: [PaperWhereUniqueInput!]
  connectOrCreate: [PaperCreateOrConnectWithoutBlogInput!]
  create: [PaperCreateWithoutBlogInput!]
  createMany: PaperCreateManyBlogInputEnvelope
  delete: [PaperWhereUniqueInput!]
  deleteMany: [PaperScalarWhereInput!]
  disconnect: [PaperWhereUniqueInput!]
  set: [PaperWhereUniqueInput!]
  update: [PaperUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [PaperUpdateManyWithWhereWithoutBlogInput!]
  upsert: [PaperUpsertWithWhereUniqueWithoutBlogInput!]
}

input PaperUpdateManyWithoutOwnerInput {
  connect: [PaperWhereUniqueInput!]
  connectOrCreate: [PaperCreateOrConnectWithoutOwnerInput!]
  create: [PaperCreateWithoutOwnerInput!]
  createMany: PaperCreateManyOwnerInputEnvelope
  delete: [PaperWhereUniqueInput!]
  deleteMany: [PaperScalarWhereInput!]
  disconnect: [PaperWhereUniqueInput!]
  set: [PaperWhereUniqueInput!]
  update: [PaperUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [PaperUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [PaperUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PaperUpdateManyWithoutTagsInput {
  connect: [PaperWhereUniqueInput!]
  connectOrCreate: [PaperCreateOrConnectWithoutTagsInput!]
  create: [PaperCreateWithoutTagsInput!]
  delete: [PaperWhereUniqueInput!]
  deleteMany: [PaperScalarWhereInput!]
  disconnect: [PaperWhereUniqueInput!]
  set: [PaperWhereUniqueInput!]
  update: [PaperUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [PaperUpdateManyWithWhereWithoutTagsInput!]
  upsert: [PaperUpsertWithWhereUniqueWithoutTagsInput!]
}

input PaperUpdateOneWithoutImagesInput {
  connect: PaperWhereUniqueInput
  connectOrCreate: PaperCreateOrConnectWithoutImagesInput
  create: PaperCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: PaperUpdateWithoutImagesInput
  upsert: PaperUpsertWithoutImagesInput
}

input PaperUpdateOneWithoutRatingsInput {
  connect: PaperWhereUniqueInput
  connectOrCreate: PaperCreateOrConnectWithoutRatingsInput
  create: PaperCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: PaperUpdateWithoutRatingsInput
  upsert: PaperUpsertWithoutRatingsInput
}

input PaperUpdateOneWithoutReactionsInput {
  connect: PaperWhereUniqueInput
  connectOrCreate: PaperCreateOrConnectWithoutReactionsInput
  create: PaperCreateWithoutReactionsInput
  delete: Boolean
  disconnect: Boolean
  update: PaperUpdateWithoutReactionsInput
  upsert: PaperUpsertWithoutReactionsInput
}

input PaperUpdateWithWhereUniqueWithoutBlogInput {
  data: PaperUpdateWithoutBlogInput!
  where: PaperWhereUniqueInput!
}

input PaperUpdateWithWhereUniqueWithoutOwnerInput {
  data: PaperUpdateWithoutOwnerInput!
  where: PaperWhereUniqueInput!
}

input PaperUpdateWithWhereUniqueWithoutTagsInput {
  data: PaperUpdateWithoutTagsInput!
  where: PaperWhereUniqueInput!
}

input PaperUpdateWithoutBlogInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPaperInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPapersInput
  ratings: RatingUpdateManyWithoutPaperInput
  reactions: ReactionUpdateManyWithoutPaperInput
  tags: TagUpdateManyWithoutPapersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateWithoutImagesInput {
  blog: BlogUpdateOneWithoutPapersInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPapersInput
  ratings: RatingUpdateManyWithoutPaperInput
  reactions: ReactionUpdateManyWithoutPaperInput
  tags: TagUpdateManyWithoutPapersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateWithoutOwnerInput {
  blog: BlogUpdateOneWithoutPapersInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPaperInput
  name: StringFieldUpdateOperationsInput
  ratings: RatingUpdateManyWithoutPaperInput
  reactions: ReactionUpdateManyWithoutPaperInput
  tags: TagUpdateManyWithoutPapersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateWithoutRatingsInput {
  blog: BlogUpdateOneWithoutPapersInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPaperInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPapersInput
  reactions: ReactionUpdateManyWithoutPaperInput
  tags: TagUpdateManyWithoutPapersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateWithoutReactionsInput {
  blog: BlogUpdateOneWithoutPapersInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPaperInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPapersInput
  ratings: RatingUpdateManyWithoutPaperInput
  tags: TagUpdateManyWithoutPapersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpdateWithoutTagsInput {
  blog: BlogUpdateOneWithoutPapersInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPaperInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPapersInput
  ratings: RatingUpdateManyWithoutPaperInput
  reactions: ReactionUpdateManyWithoutPaperInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PaperUpsertWithWhereUniqueWithoutBlogInput {
  create: PaperCreateWithoutBlogInput!
  update: PaperUpdateWithoutBlogInput!
  where: PaperWhereUniqueInput!
}

input PaperUpsertWithWhereUniqueWithoutOwnerInput {
  create: PaperCreateWithoutOwnerInput!
  update: PaperUpdateWithoutOwnerInput!
  where: PaperWhereUniqueInput!
}

input PaperUpsertWithWhereUniqueWithoutTagsInput {
  create: PaperCreateWithoutTagsInput!
  update: PaperUpdateWithoutTagsInput!
  where: PaperWhereUniqueInput!
}

input PaperUpsertWithoutImagesInput {
  create: PaperCreateWithoutImagesInput!
  update: PaperUpdateWithoutImagesInput!
}

input PaperUpsertWithoutRatingsInput {
  create: PaperCreateWithoutRatingsInput!
  update: PaperUpdateWithoutRatingsInput!
}

input PaperUpsertWithoutReactionsInput {
  create: PaperCreateWithoutReactionsInput!
  update: PaperUpdateWithoutReactionsInput!
}

input PaperWhereInput {
  AND: [PaperWhereInput!]
  NOT: [PaperWhereInput!]
  OR: [PaperWhereInput!]
  blog: BlogWhereInput
  blogId: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  headerImageUrl: StringNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  name: StringFilter
  owner: UserWhereInput
  ownerId: StringFilter
  ratings: RatingListRelationFilter
  reactions: ReactionListRelationFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  url: StringNullableFilter
  visibility: EnumVisibilityFilter
}

input PaperWhereUniqueInput {
  id: String
}

type Post implements Commendable & Node {
  abstract: String
  commentCount: Int
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): CommentConnection
  content: String!
  createdAt: DateTime!
  editedAt: DateTime
  headerImageUrl: String

  """ID for a resource"""
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  imagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  minuteRead: Int
  owner: User!
  ratings(after: RatingWhereUniqueInput, before: RatingWhereUniqueInput, first: Int, last: Int): [Rating!]!
  ratingsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): RatingConnection
  reactionCount: Int
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  reactionsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ReactionConnection
  renderedContent: Json!
  shares(after: ShareCountWhereUniqueInput, before: ShareCountWhereUniqueInput, first: Int, last: Int): [ShareCount!]!
  sharesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ShareCountConnection
  slug: String!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  tagsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TagConnection
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
  visibility: Visibility!
}

type PostConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [PostEdge]

  """Flattened list of Post type"""
  nodes: [Post]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input PostCreateInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateManyBlogInput {
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  minuteRead: Int
  ownerId: String!
  slug: String!
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateManyBlogInputEnvelope {
  data: [PostCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input PostCreateManyOwnerInput {
  blogId: String!
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  minuteRead: Int
  slug: String!
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateManyOwnerInputEnvelope {
  data: [PostCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutBlogInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutBlogInput!]
  create: [PostCreateWithoutBlogInput!]
  createMany: PostCreateManyBlogInputEnvelope
}

input PostCreateNestedManyWithoutOwnerInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutOwnerInput!]
  create: [PostCreateWithoutOwnerInput!]
  createMany: PostCreateManyOwnerInputEnvelope
}

input PostCreateNestedManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutTagsInput!]
  create: [PostCreateWithoutTagsInput!]
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateNestedOneWithoutImagesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutImagesInput
  create: PostCreateWithoutImagesInput
}

input PostCreateNestedOneWithoutRatingsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutRatingsInput
  create: PostCreateWithoutRatingsInput
}

input PostCreateNestedOneWithoutReactionsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutReactionsInput
  create: PostCreateWithoutReactionsInput
}

input PostCreateNestedOneWithoutSharesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutSharesInput
  create: PostCreateWithoutSharesInput
}

input PostCreateOrConnectWithoutBlogInput {
  create: PostCreateWithoutBlogInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutImagesInput {
  create: PostCreateWithoutImagesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutOwnerInput {
  create: PostCreateWithoutOwnerInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutRatingsInput {
  create: PostCreateWithoutRatingsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutReactionsInput {
  create: PostCreateWithoutReactionsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutSharesInput {
  create: PostCreateWithoutSharesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutBlogInput {
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutCommentsInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutImagesInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutOwnerInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutRatingsInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutReactionsInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutSharesInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  slug: String!
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

input PostCreateWithoutTagsInput {
  blog: BlogCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutPostInput
  minuteRead: Int
  owner: UserCreateNestedOneWithoutPostsInput!
  ratings: RatingCreateNestedManyWithoutPostInput
  reactions: ReactionCreateNestedManyWithoutPostInput
  shares: ShareCountCreateNestedManyWithoutPostInput
  slug: String!
  title: String!
  updatedAt: DateTime
  viewCount: Int
  visibility: Visibility
}

type PostEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Post
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  blogId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  editedAt: DateTimeNullableFilter
  headerImageUrl: StringNullableFilter
  id: StringFilter
  minuteRead: IntNullableFilter
  ownerId: StringFilter
  slug: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
  visibility: EnumVisibilityFilter
}

input PostUpdateInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutBlogInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutOwnerInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutTagsInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutBlogInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutBlogInput!]
  create: [PostCreateWithoutBlogInput!]
  createMany: PostCreateManyBlogInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [PostUpdateManyWithWhereWithoutBlogInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutBlogInput!]
}

input PostUpdateManyWithoutOwnerInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutOwnerInput!]
  create: [PostCreateWithoutOwnerInput!]
  createMany: PostCreateManyOwnerInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [PostUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PostUpdateManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutTagsInput!]
  create: [PostCreateWithoutTagsInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [PostUpdateManyWithWhereWithoutTagsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
}

input PostUpdateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneWithoutImagesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutImagesInput
  create: PostCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutImagesInput
  upsert: PostUpsertWithoutImagesInput
}

input PostUpdateOneWithoutRatingsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutRatingsInput
  create: PostCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutRatingsInput
  upsert: PostUpsertWithoutRatingsInput
}

input PostUpdateOneWithoutReactionsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutReactionsInput
  create: PostCreateWithoutReactionsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutReactionsInput
  upsert: PostUpsertWithoutReactionsInput
}

input PostUpdateOneWithoutSharesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutSharesInput
  create: PostCreateWithoutSharesInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutSharesInput
  upsert: PostUpsertWithoutSharesInput
}

input PostUpdateWithWhereUniqueWithoutBlogInput {
  data: PostUpdateWithoutBlogInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutOwnerInput {
  data: PostUpdateWithoutOwnerInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  data: PostUpdateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutBlogInput {
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutImagesInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutOwnerInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutRatingsInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutReactionsInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutSharesInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpdateWithoutTagsInput {
  blog: BlogUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutPostInput
  minuteRead: NullableIntFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  ratings: RatingUpdateManyWithoutPostInput
  reactions: ReactionUpdateManyWithoutPostInput
  shares: ShareCountUpdateManyWithoutPostInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutBlogInput {
  create: PostCreateWithoutBlogInput!
  update: PostUpdateWithoutBlogInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutOwnerInput {
  create: PostCreateWithoutOwnerInput!
  update: PostUpdateWithoutOwnerInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  update: PostUpdateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
}

input PostUpsertWithoutImagesInput {
  create: PostCreateWithoutImagesInput!
  update: PostUpdateWithoutImagesInput!
}

input PostUpsertWithoutRatingsInput {
  create: PostCreateWithoutRatingsInput!
  update: PostUpdateWithoutRatingsInput!
}

input PostUpsertWithoutReactionsInput {
  create: PostCreateWithoutReactionsInput!
  update: PostUpdateWithoutReactionsInput!
}

input PostUpsertWithoutSharesInput {
  create: PostCreateWithoutSharesInput!
  update: PostUpdateWithoutSharesInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  blog: BlogWhereInput
  blogId: StringFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  editedAt: DateTimeNullableFilter
  headerImageUrl: StringNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  minuteRead: IntNullableFilter
  owner: UserWhereInput
  ownerId: StringFilter
  ratings: RatingListRelationFilter
  reactions: ReactionListRelationFilter
  shares: ShareCountListRelationFilter
  slug: StringFilter
  tags: TagListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  viewCount: IntFilter
  visibility: EnumVisibilityFilter
}

input PostWhereUniqueInput {
  id: String
  slug: String
}

type Project implements Node {
  abstract: String
  content: String!
  createdAt: DateTime!
  headerImageUrl: String

  """ID for a resource"""
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  imagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  name: String!
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  reactionsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ReactionConnection
  renderedContent: Json!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  tagsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TagConnection
  updatedAt: DateTime!
  url: String
  visibility: Visibility!
}

type ProjectConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ProjectEdge]

  """Flattened list of Project type"""
  nodes: [Project]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input ProjectCreateInput {
  blog: BlogCreateNestedOneWithoutProjectsInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutProjectInput
  name: String!
  owner: UserCreateNestedOneWithoutProjectsInput!
  ratings: RatingCreateNestedManyWithoutProjectInput
  reactions: ReactionCreateNestedManyWithoutProjectInput
  tags: TagCreateNestedManyWithoutProjectsInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateManyBlogInput {
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  name: String!
  ownerId: String!
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateManyBlogInputEnvelope {
  data: [ProjectCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input ProjectCreateManyOwnerInput {
  blogId: String
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  name: String!
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateManyOwnerInputEnvelope {
  data: [ProjectCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input ProjectCreateNestedManyWithoutBlogInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutBlogInput!]
  create: [ProjectCreateWithoutBlogInput!]
  createMany: ProjectCreateManyBlogInputEnvelope
}

input ProjectCreateNestedManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutOwnerInput!]
  create: [ProjectCreateWithoutOwnerInput!]
  createMany: ProjectCreateManyOwnerInputEnvelope
}

input ProjectCreateNestedManyWithoutTagsInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutTagsInput!]
  create: [ProjectCreateWithoutTagsInput!]
}

input ProjectCreateNestedOneWithoutImagesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutImagesInput
  create: ProjectCreateWithoutImagesInput
}

input ProjectCreateNestedOneWithoutRatingsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutRatingsInput
  create: ProjectCreateWithoutRatingsInput
}

input ProjectCreateNestedOneWithoutReactionsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutReactionsInput
  create: ProjectCreateWithoutReactionsInput
}

input ProjectCreateOrConnectWithoutBlogInput {
  create: ProjectCreateWithoutBlogInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutImagesInput {
  create: ProjectCreateWithoutImagesInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutRatingsInput {
  create: ProjectCreateWithoutRatingsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutReactionsInput {
  create: ProjectCreateWithoutReactionsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutTagsInput {
  create: ProjectCreateWithoutTagsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutBlogInput {
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutProjectInput
  name: String!
  owner: UserCreateNestedOneWithoutProjectsInput!
  ratings: RatingCreateNestedManyWithoutProjectInput
  reactions: ReactionCreateNestedManyWithoutProjectInput
  tags: TagCreateNestedManyWithoutProjectsInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateWithoutImagesInput {
  blog: BlogCreateNestedOneWithoutProjectsInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutProjectsInput!
  ratings: RatingCreateNestedManyWithoutProjectInput
  reactions: ReactionCreateNestedManyWithoutProjectInput
  tags: TagCreateNestedManyWithoutProjectsInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateWithoutOwnerInput {
  blog: BlogCreateNestedOneWithoutProjectsInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutProjectInput
  name: String!
  ratings: RatingCreateNestedManyWithoutProjectInput
  reactions: ReactionCreateNestedManyWithoutProjectInput
  tags: TagCreateNestedManyWithoutProjectsInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateWithoutRatingsInput {
  blog: BlogCreateNestedOneWithoutProjectsInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutProjectInput
  name: String!
  owner: UserCreateNestedOneWithoutProjectsInput!
  reactions: ReactionCreateNestedManyWithoutProjectInput
  tags: TagCreateNestedManyWithoutProjectsInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateWithoutReactionsInput {
  blog: BlogCreateNestedOneWithoutProjectsInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutProjectInput
  name: String!
  owner: UserCreateNestedOneWithoutProjectsInput!
  ratings: RatingCreateNestedManyWithoutProjectInput
  tags: TagCreateNestedManyWithoutProjectsInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

input ProjectCreateWithoutTagsInput {
  blog: BlogCreateNestedOneWithoutProjectsInput
  content: String!
  createdAt: DateTime
  headerImageUrl: String
  id: String
  images: ImageCreateNestedManyWithoutProjectInput
  name: String!
  owner: UserCreateNestedOneWithoutProjectsInput!
  ratings: RatingCreateNestedManyWithoutProjectInput
  reactions: ReactionCreateNestedManyWithoutProjectInput
  updatedAt: DateTime
  url: String
  visibility: Visibility
}

type ProjectEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Project
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  blogId: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  headerImageUrl: StringNullableFilter
  id: StringFilter
  name: StringFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
  url: StringNullableFilter
  visibility: EnumVisibilityFilter
}

input ProjectUpdateInput {
  blog: BlogUpdateOneWithoutProjectsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutProjectsInput
  ratings: RatingUpdateManyWithoutProjectInput
  reactions: ReactionUpdateManyWithoutProjectInput
  tags: TagUpdateManyWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutBlogInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutOwnerInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutTagsInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutBlogInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutBlogInput!]
  create: [ProjectCreateWithoutBlogInput!]
  createMany: ProjectCreateManyBlogInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutBlogInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutBlogInput!]
}

input ProjectUpdateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutOwnerInput!]
  create: [ProjectCreateWithoutOwnerInput!]
  createMany: ProjectCreateManyOwnerInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ProjectUpdateManyWithoutTagsInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutTagsInput!]
  create: [ProjectCreateWithoutTagsInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutTagsInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTagsInput!]
}

input ProjectUpdateOneWithoutImagesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutImagesInput
  create: ProjectCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutImagesInput
  upsert: ProjectUpsertWithoutImagesInput
}

input ProjectUpdateOneWithoutRatingsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutRatingsInput
  create: ProjectCreateWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutRatingsInput
  upsert: ProjectUpsertWithoutRatingsInput
}

input ProjectUpdateOneWithoutReactionsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutReactionsInput
  create: ProjectCreateWithoutReactionsInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutReactionsInput
  upsert: ProjectUpsertWithoutReactionsInput
}

input ProjectUpdateWithWhereUniqueWithoutBlogInput {
  data: ProjectUpdateWithoutBlogInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  data: ProjectUpdateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutTagsInput {
  data: ProjectUpdateWithoutTagsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutBlogInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutProjectsInput
  ratings: RatingUpdateManyWithoutProjectInput
  reactions: ReactionUpdateManyWithoutProjectInput
  tags: TagUpdateManyWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateWithoutImagesInput {
  blog: BlogUpdateOneWithoutProjectsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutProjectsInput
  ratings: RatingUpdateManyWithoutProjectInput
  reactions: ReactionUpdateManyWithoutProjectInput
  tags: TagUpdateManyWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateWithoutOwnerInput {
  blog: BlogUpdateOneWithoutProjectsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  ratings: RatingUpdateManyWithoutProjectInput
  reactions: ReactionUpdateManyWithoutProjectInput
  tags: TagUpdateManyWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateWithoutRatingsInput {
  blog: BlogUpdateOneWithoutProjectsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutProjectsInput
  reactions: ReactionUpdateManyWithoutProjectInput
  tags: TagUpdateManyWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateWithoutReactionsInput {
  blog: BlogUpdateOneWithoutProjectsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutProjectsInput
  ratings: RatingUpdateManyWithoutProjectInput
  tags: TagUpdateManyWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpdateWithoutTagsInput {
  blog: BlogUpdateOneWithoutProjectsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImageUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutProjectsInput
  ratings: RatingUpdateManyWithoutProjectInput
  reactions: ReactionUpdateManyWithoutProjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutBlogInput {
  create: ProjectCreateWithoutBlogInput!
  update: ProjectUpdateWithoutBlogInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  update: ProjectUpdateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutTagsInput {
  create: ProjectCreateWithoutTagsInput!
  update: ProjectUpdateWithoutTagsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutImagesInput {
  create: ProjectCreateWithoutImagesInput!
  update: ProjectUpdateWithoutImagesInput!
}

input ProjectUpsertWithoutRatingsInput {
  create: ProjectCreateWithoutRatingsInput!
  update: ProjectUpdateWithoutRatingsInput!
}

input ProjectUpsertWithoutReactionsInput {
  create: ProjectCreateWithoutReactionsInput!
  update: ProjectUpdateWithoutReactionsInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  blog: BlogWhereInput
  blogId: StringNullableFilter
  content: StringFilter
  createdAt: DateTimeFilter
  headerImageUrl: StringNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  name: StringFilter
  owner: UserWhereInput
  ownerId: StringFilter
  ratings: RatingListRelationFilter
  reactions: ReactionListRelationFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  url: StringNullableFilter
  visibility: EnumVisibilityFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  BlogsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): BlogConnection
  CommentsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): CommentConnection
  ImagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  LinksConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): LinkConnection
  PapersConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PaperConnection
  PostsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PostConnection
  ProjectsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ProjectConnection
  RatingsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): RatingConnection
  ReactionsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ReactionConnection
  SharesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ShareCountConnection
  TagsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TagConnection
  ThoughtsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ThoughtConnection
  TranslationsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TranslationConnection
  blog(where: whereUniqueInput!): Blog!
  comment(where: CommentWhereUniqueInput!): Comment
  image(where: ImageWhereUniqueInput!): Image
  link(where: LinkWhereUniqueInput!): Link

  """Fetches an object given its global ID"""
  node(
    """The global ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their global IDs"""
  nodes(
    """The global IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  paper(where: PaperWhereUniqueInput!): Paper
  post(where: PostWhereUniqueInput!): Post
  project(where: ProjectWhereUniqueInput!): Project
  rating(where: RatingWhereUniqueInput!): Rating
  reaction(where: ReactionWhereUniqueInput!): Reaction
  shareCount(where: ShareCountWhereUniqueInput!): ShareCount
  tag(where: TagWhereUniqueInput!): Tag
  thought(where: ThoughtWhereUniqueInput!): Thought
  translation(where: TranslationWhereUniqueInput!): Translation
  user(where: whereUniqueInput!): User

  """Current logged in user"""
  viewer: User
}

enum QueryMode {
  default
  insensitive
}

type Rating implements Node {
  comment: String
  createdAt: DateTime!

  """ID for a resource"""
  id: ID
  score: Int!
  updatedAt: DateTime!
}

type RatingConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [RatingEdge]

  """Flattened list of Rating type"""
  nodes: [Rating]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input RatingCreateInput {
  comment: String
  createdAt: DateTime
  id: String
  paper: PaperCreateNestedOneWithoutRatingsInput
  post: PostCreateNestedOneWithoutRatingsInput
  project: ProjectCreateNestedOneWithoutRatingsInput
  score: Int!
  updatedAt: DateTime
}

input RatingCreateManyPaperInput {
  comment: String
  createdAt: DateTime
  id: String
  postId: String
  projectId: String
  score: Int!
  updatedAt: DateTime
}

input RatingCreateManyPaperInputEnvelope {
  data: [RatingCreateManyPaperInput!]
  skipDuplicates: Boolean
}

input RatingCreateManyPostInput {
  comment: String
  createdAt: DateTime
  id: String
  paperId: String
  projectId: String
  score: Int!
  updatedAt: DateTime
}

input RatingCreateManyPostInputEnvelope {
  data: [RatingCreateManyPostInput!]
  skipDuplicates: Boolean
}

input RatingCreateManyProjectInput {
  comment: String
  createdAt: DateTime
  id: String
  paperId: String
  postId: String
  score: Int!
  updatedAt: DateTime
}

input RatingCreateManyProjectInputEnvelope {
  data: [RatingCreateManyProjectInput!]
  skipDuplicates: Boolean
}

input RatingCreateNestedManyWithoutPaperInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutPaperInput!]
  create: [RatingCreateWithoutPaperInput!]
  createMany: RatingCreateManyPaperInputEnvelope
}

input RatingCreateNestedManyWithoutPostInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutPostInput!]
  create: [RatingCreateWithoutPostInput!]
  createMany: RatingCreateManyPostInputEnvelope
}

input RatingCreateNestedManyWithoutProjectInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutProjectInput!]
  create: [RatingCreateWithoutProjectInput!]
  createMany: RatingCreateManyProjectInputEnvelope
}

input RatingCreateOrConnectWithoutPaperInput {
  create: RatingCreateWithoutPaperInput!
  where: RatingWhereUniqueInput!
}

input RatingCreateOrConnectWithoutPostInput {
  create: RatingCreateWithoutPostInput!
  where: RatingWhereUniqueInput!
}

input RatingCreateOrConnectWithoutProjectInput {
  create: RatingCreateWithoutProjectInput!
  where: RatingWhereUniqueInput!
}

input RatingCreateWithoutPaperInput {
  comment: String
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutRatingsInput
  project: ProjectCreateNestedOneWithoutRatingsInput
  score: Int!
  updatedAt: DateTime
}

input RatingCreateWithoutPostInput {
  comment: String
  createdAt: DateTime
  id: String
  paper: PaperCreateNestedOneWithoutRatingsInput
  project: ProjectCreateNestedOneWithoutRatingsInput
  score: Int!
  updatedAt: DateTime
}

input RatingCreateWithoutProjectInput {
  comment: String
  createdAt: DateTime
  id: String
  paper: PaperCreateNestedOneWithoutRatingsInput
  post: PostCreateNestedOneWithoutRatingsInput
  score: Int!
  updatedAt: DateTime
}

type RatingEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Rating
}

input RatingListRelationFilter {
  every: RatingWhereInput
  none: RatingWhereInput
  some: RatingWhereInput
}

input RatingScalarWhereInput {
  AND: [RatingScalarWhereInput!]
  NOT: [RatingScalarWhereInput!]
  OR: [RatingScalarWhereInput!]
  comment: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  paperId: StringNullableFilter
  postId: StringNullableFilter
  projectId: StringNullableFilter
  score: IntFilter
  updatedAt: DateTimeFilter
}

input RatingUpdateInput {
  comment: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutRatingsInput
  post: PostUpdateOneWithoutRatingsInput
  project: ProjectUpdateOneWithoutRatingsInput
  score: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RatingUpdateManyMutationInput {
  comment: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  score: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RatingUpdateManyWithWhereWithoutPaperInput {
  data: RatingUpdateManyMutationInput!
  where: RatingScalarWhereInput!
}

input RatingUpdateManyWithWhereWithoutPostInput {
  data: RatingUpdateManyMutationInput!
  where: RatingScalarWhereInput!
}

input RatingUpdateManyWithWhereWithoutProjectInput {
  data: RatingUpdateManyMutationInput!
  where: RatingScalarWhereInput!
}

input RatingUpdateManyWithoutPaperInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutPaperInput!]
  create: [RatingCreateWithoutPaperInput!]
  createMany: RatingCreateManyPaperInputEnvelope
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutPaperInput!]
  updateMany: [RatingUpdateManyWithWhereWithoutPaperInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutPaperInput!]
}

input RatingUpdateManyWithoutPostInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutPostInput!]
  create: [RatingCreateWithoutPostInput!]
  createMany: RatingCreateManyPostInputEnvelope
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [RatingUpdateManyWithWhereWithoutPostInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutPostInput!]
}

input RatingUpdateManyWithoutProjectInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutProjectInput!]
  create: [RatingCreateWithoutProjectInput!]
  createMany: RatingCreateManyProjectInputEnvelope
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [RatingUpdateManyWithWhereWithoutProjectInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutProjectInput!]
}

input RatingUpdateWithWhereUniqueWithoutPaperInput {
  data: RatingUpdateWithoutPaperInput!
  where: RatingWhereUniqueInput!
}

input RatingUpdateWithWhereUniqueWithoutPostInput {
  data: RatingUpdateWithoutPostInput!
  where: RatingWhereUniqueInput!
}

input RatingUpdateWithWhereUniqueWithoutProjectInput {
  data: RatingUpdateWithoutProjectInput!
  where: RatingWhereUniqueInput!
}

input RatingUpdateWithoutPaperInput {
  comment: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneWithoutRatingsInput
  project: ProjectUpdateOneWithoutRatingsInput
  score: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RatingUpdateWithoutPostInput {
  comment: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutRatingsInput
  project: ProjectUpdateOneWithoutRatingsInput
  score: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RatingUpdateWithoutProjectInput {
  comment: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutRatingsInput
  post: PostUpdateOneWithoutRatingsInput
  score: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RatingUpsertWithWhereUniqueWithoutPaperInput {
  create: RatingCreateWithoutPaperInput!
  update: RatingUpdateWithoutPaperInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutPostInput {
  create: RatingCreateWithoutPostInput!
  update: RatingUpdateWithoutPostInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutProjectInput {
  create: RatingCreateWithoutProjectInput!
  update: RatingUpdateWithoutProjectInput!
  where: RatingWhereUniqueInput!
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  comment: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  paper: PaperWhereInput
  paperId: StringNullableFilter
  post: PostWhereInput
  postId: StringNullableFilter
  project: ProjectWhereInput
  projectId: StringNullableFilter
  score: IntFilter
  updatedAt: DateTimeFilter
}

input RatingWhereUniqueInput {
  id: String
}

type Reaction implements Node {
  createdAt: DateTime!
  iconUrl: String

  """ID for a resource"""
  id: ID
  name: String!
  updatedAt: DateTime!
}

type ReactionConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ReactionEdge]

  """Flattened list of Reaction type"""
  nodes: [Reaction]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input ReactionCreateInput {
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutReactionsInput
  iconUrl: String
  id: String
  name: String!
  paper: PaperCreateNestedOneWithoutReactionsInput
  post: PostCreateNestedOneWithoutReactionsInput
  project: ProjectCreateNestedOneWithoutReactionsInput
  thought: ThoughtCreateNestedOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionCreateManyDesignInput {
  createdAt: DateTime
  iconUrl: String
  id: String
  name: String!
  paperId: String
  postId: String
  projectId: String
  thoughtId: String
  updatedAt: DateTime
}

input ReactionCreateManyDesignInputEnvelope {
  data: [ReactionCreateManyDesignInput!]
  skipDuplicates: Boolean
}

input ReactionCreateManyPaperInput {
  createdAt: DateTime
  designId: String
  iconUrl: String
  id: String
  name: String!
  postId: String
  projectId: String
  thoughtId: String
  updatedAt: DateTime
}

input ReactionCreateManyPaperInputEnvelope {
  data: [ReactionCreateManyPaperInput!]
  skipDuplicates: Boolean
}

input ReactionCreateManyPostInput {
  createdAt: DateTime
  designId: String
  iconUrl: String
  id: String
  name: String!
  paperId: String
  projectId: String
  thoughtId: String
  updatedAt: DateTime
}

input ReactionCreateManyPostInputEnvelope {
  data: [ReactionCreateManyPostInput!]
  skipDuplicates: Boolean
}

input ReactionCreateManyProjectInput {
  createdAt: DateTime
  designId: String
  iconUrl: String
  id: String
  name: String!
  paperId: String
  postId: String
  thoughtId: String
  updatedAt: DateTime
}

input ReactionCreateManyProjectInputEnvelope {
  data: [ReactionCreateManyProjectInput!]
  skipDuplicates: Boolean
}

input ReactionCreateManyThoughtInput {
  createdAt: DateTime
  designId: String
  iconUrl: String
  id: String
  name: String!
  paperId: String
  postId: String
  projectId: String
  updatedAt: DateTime
}

input ReactionCreateManyThoughtInputEnvelope {
  data: [ReactionCreateManyThoughtInput!]
  skipDuplicates: Boolean
}

input ReactionCreateNestedManyWithoutDesignInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutDesignInput!]
  create: [ReactionCreateWithoutDesignInput!]
  createMany: ReactionCreateManyDesignInputEnvelope
}

input ReactionCreateNestedManyWithoutPaperInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPaperInput!]
  create: [ReactionCreateWithoutPaperInput!]
  createMany: ReactionCreateManyPaperInputEnvelope
}

input ReactionCreateNestedManyWithoutPostInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPostInput!]
  create: [ReactionCreateWithoutPostInput!]
  createMany: ReactionCreateManyPostInputEnvelope
}

input ReactionCreateNestedManyWithoutProjectInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutProjectInput!]
  create: [ReactionCreateWithoutProjectInput!]
  createMany: ReactionCreateManyProjectInputEnvelope
}

input ReactionCreateNestedManyWithoutThoughtInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutThoughtInput!]
  create: [ReactionCreateWithoutThoughtInput!]
  createMany: ReactionCreateManyThoughtInputEnvelope
}

input ReactionCreateOrConnectWithoutDesignInput {
  create: ReactionCreateWithoutDesignInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutPaperInput {
  create: ReactionCreateWithoutPaperInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutPostInput {
  create: ReactionCreateWithoutPostInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutProjectInput {
  create: ReactionCreateWithoutProjectInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutThoughtInput {
  create: ReactionCreateWithoutThoughtInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateWithoutDesignInput {
  createdAt: DateTime
  iconUrl: String
  id: String
  name: String!
  paper: PaperCreateNestedOneWithoutReactionsInput
  post: PostCreateNestedOneWithoutReactionsInput
  project: ProjectCreateNestedOneWithoutReactionsInput
  thought: ThoughtCreateNestedOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionCreateWithoutPaperInput {
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutReactionsInput
  iconUrl: String
  id: String
  name: String!
  post: PostCreateNestedOneWithoutReactionsInput
  project: ProjectCreateNestedOneWithoutReactionsInput
  thought: ThoughtCreateNestedOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionCreateWithoutPostInput {
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutReactionsInput
  iconUrl: String
  id: String
  name: String!
  paper: PaperCreateNestedOneWithoutReactionsInput
  project: ProjectCreateNestedOneWithoutReactionsInput
  thought: ThoughtCreateNestedOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionCreateWithoutProjectInput {
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutReactionsInput
  iconUrl: String
  id: String
  name: String!
  paper: PaperCreateNestedOneWithoutReactionsInput
  post: PostCreateNestedOneWithoutReactionsInput
  thought: ThoughtCreateNestedOneWithoutReactionsInput
  updatedAt: DateTime
}

input ReactionCreateWithoutThoughtInput {
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutReactionsInput
  iconUrl: String
  id: String
  name: String!
  paper: PaperCreateNestedOneWithoutReactionsInput
  post: PostCreateNestedOneWithoutReactionsInput
  project: ProjectCreateNestedOneWithoutReactionsInput
  updatedAt: DateTime
}

type ReactionEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Reaction
}

input ReactionListRelationFilter {
  every: ReactionWhereInput
  none: ReactionWhereInput
  some: ReactionWhereInput
}

input ReactionScalarWhereInput {
  AND: [ReactionScalarWhereInput!]
  NOT: [ReactionScalarWhereInput!]
  OR: [ReactionScalarWhereInput!]
  createdAt: DateTimeFilter
  designId: StringNullableFilter
  iconUrl: StringNullableFilter
  id: StringFilter
  name: StringFilter
  paperId: StringNullableFilter
  postId: StringNullableFilter
  projectId: StringNullableFilter
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ReactionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutReactionsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutReactionsInput
  post: PostUpdateOneWithoutReactionsInput
  project: ProjectUpdateOneWithoutReactionsInput
  thought: ThoughtUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateManyWithWhereWithoutDesignInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithWhereWithoutPaperInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithWhereWithoutPostInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithWhereWithoutProjectInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithWhereWithoutThoughtInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithoutDesignInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutDesignInput!]
  create: [ReactionCreateWithoutDesignInput!]
  createMany: ReactionCreateManyDesignInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutDesignInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutDesignInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutDesignInput!]
}

input ReactionUpdateManyWithoutPaperInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPaperInput!]
  create: [ReactionCreateWithoutPaperInput!]
  createMany: ReactionCreateManyPaperInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutPaperInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutPaperInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutPaperInput!]
}

input ReactionUpdateManyWithoutPostInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPostInput!]
  create: [ReactionCreateWithoutPostInput!]
  createMany: ReactionCreateManyPostInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutPostInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutPostInput!]
}

input ReactionUpdateManyWithoutProjectInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutProjectInput!]
  create: [ReactionCreateWithoutProjectInput!]
  createMany: ReactionCreateManyProjectInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutProjectInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutProjectInput!]
}

input ReactionUpdateManyWithoutThoughtInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutThoughtInput!]
  create: [ReactionCreateWithoutThoughtInput!]
  createMany: ReactionCreateManyThoughtInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutThoughtInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutThoughtInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutThoughtInput!]
}

input ReactionUpdateWithWhereUniqueWithoutDesignInput {
  data: ReactionUpdateWithoutDesignInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithWhereUniqueWithoutPaperInput {
  data: ReactionUpdateWithoutPaperInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithWhereUniqueWithoutPostInput {
  data: ReactionUpdateWithoutPostInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithWhereUniqueWithoutProjectInput {
  data: ReactionUpdateWithoutProjectInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithWhereUniqueWithoutThoughtInput {
  data: ReactionUpdateWithoutThoughtInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithoutDesignInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutReactionsInput
  post: PostUpdateOneWithoutReactionsInput
  project: ProjectUpdateOneWithoutReactionsInput
  thought: ThoughtUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateWithoutPaperInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutReactionsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  post: PostUpdateOneWithoutReactionsInput
  project: ProjectUpdateOneWithoutReactionsInput
  thought: ThoughtUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateWithoutPostInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutReactionsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutReactionsInput
  project: ProjectUpdateOneWithoutReactionsInput
  thought: ThoughtUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutReactionsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutReactionsInput
  post: PostUpdateOneWithoutReactionsInput
  thought: ThoughtUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpdateWithoutThoughtInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutReactionsInput
  iconUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paper: PaperUpdateOneWithoutReactionsInput
  post: PostUpdateOneWithoutReactionsInput
  project: ProjectUpdateOneWithoutReactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReactionUpsertWithWhereUniqueWithoutDesignInput {
  create: ReactionCreateWithoutDesignInput!
  update: ReactionUpdateWithoutDesignInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutPaperInput {
  create: ReactionCreateWithoutPaperInput!
  update: ReactionUpdateWithoutPaperInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutPostInput {
  create: ReactionCreateWithoutPostInput!
  update: ReactionUpdateWithoutPostInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutProjectInput {
  create: ReactionCreateWithoutProjectInput!
  update: ReactionUpdateWithoutProjectInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutThoughtInput {
  create: ReactionCreateWithoutThoughtInput!
  update: ReactionUpdateWithoutThoughtInput!
  where: ReactionWhereUniqueInput!
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  createdAt: DateTimeFilter
  design: DesignWhereInput
  designId: StringNullableFilter
  iconUrl: StringNullableFilter
  id: StringFilter
  name: StringFilter
  paper: PaperWhereInput
  paperId: StringNullableFilter
  post: PostWhereInput
  postId: StringNullableFilter
  project: ProjectWhereInput
  projectId: StringNullableFilter
  thought: ThoughtWhereInput
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ReactionWhereUniqueInput {
  id: String
  name: String
}

type ShareCount implements Node {
  count: Int!
  createdAt: DateTime!

  """ID for a resource"""
  id: ID
  updatedAt: DateTime!
}

type ShareCountConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ShareCountEdge]

  """Flattened list of ShareCount type"""
  nodes: [ShareCount]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input ShareCountCreateInput {
  count: Int!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutSharesInput
  id: String
  post: PostCreateNestedOneWithoutSharesInput
  shareType: ShareType!
  targetId: String!
  thought: ThoughtCreateNestedOneWithoutSharesInput
  updatedAt: DateTime
}

input ShareCountCreateManyDesignInput {
  count: Int!
  createdAt: DateTime
  id: String
  postId: String
  shareType: ShareType!
  targetId: String!
  thoughtId: String
  updatedAt: DateTime
}

input ShareCountCreateManyDesignInputEnvelope {
  data: [ShareCountCreateManyDesignInput!]
  skipDuplicates: Boolean
}

input ShareCountCreateManyPostInput {
  count: Int!
  createdAt: DateTime
  designId: String
  id: String
  shareType: ShareType!
  targetId: String!
  thoughtId: String
  updatedAt: DateTime
}

input ShareCountCreateManyPostInputEnvelope {
  data: [ShareCountCreateManyPostInput!]
  skipDuplicates: Boolean
}

input ShareCountCreateManyThoughtInput {
  count: Int!
  createdAt: DateTime
  designId: String
  id: String
  postId: String
  shareType: ShareType!
  targetId: String!
  updatedAt: DateTime
}

input ShareCountCreateManyThoughtInputEnvelope {
  data: [ShareCountCreateManyThoughtInput!]
  skipDuplicates: Boolean
}

input ShareCountCreateNestedManyWithoutDesignInput {
  connect: [ShareCountWhereUniqueInput!]
  connectOrCreate: [ShareCountCreateOrConnectWithoutDesignInput!]
  create: [ShareCountCreateWithoutDesignInput!]
  createMany: ShareCountCreateManyDesignInputEnvelope
}

input ShareCountCreateNestedManyWithoutPostInput {
  connect: [ShareCountWhereUniqueInput!]
  connectOrCreate: [ShareCountCreateOrConnectWithoutPostInput!]
  create: [ShareCountCreateWithoutPostInput!]
  createMany: ShareCountCreateManyPostInputEnvelope
}

input ShareCountCreateNestedManyWithoutThoughtInput {
  connect: [ShareCountWhereUniqueInput!]
  connectOrCreate: [ShareCountCreateOrConnectWithoutThoughtInput!]
  create: [ShareCountCreateWithoutThoughtInput!]
  createMany: ShareCountCreateManyThoughtInputEnvelope
}

input ShareCountCreateOrConnectWithoutDesignInput {
  create: ShareCountCreateWithoutDesignInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountCreateOrConnectWithoutPostInput {
  create: ShareCountCreateWithoutPostInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountCreateOrConnectWithoutThoughtInput {
  create: ShareCountCreateWithoutThoughtInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountCreateWithoutDesignInput {
  count: Int!
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutSharesInput
  shareType: ShareType!
  targetId: String!
  thought: ThoughtCreateNestedOneWithoutSharesInput
  updatedAt: DateTime
}

input ShareCountCreateWithoutPostInput {
  count: Int!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutSharesInput
  id: String
  shareType: ShareType!
  targetId: String!
  thought: ThoughtCreateNestedOneWithoutSharesInput
  updatedAt: DateTime
}

input ShareCountCreateWithoutThoughtInput {
  count: Int!
  createdAt: DateTime
  design: DesignCreateNestedOneWithoutSharesInput
  id: String
  post: PostCreateNestedOneWithoutSharesInput
  shareType: ShareType!
  targetId: String!
  updatedAt: DateTime
}

type ShareCountEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: ShareCount
}

input ShareCountListRelationFilter {
  every: ShareCountWhereInput
  none: ShareCountWhereInput
  some: ShareCountWhereInput
}

input ShareCountScalarWhereInput {
  AND: [ShareCountScalarWhereInput!]
  NOT: [ShareCountScalarWhereInput!]
  OR: [ShareCountScalarWhereInput!]
  count: IntFilter
  createdAt: DateTimeFilter
  designId: StringNullableFilter
  id: StringFilter
  postId: StringNullableFilter
  shareType: EnumShareTypeFilter
  targetId: StringFilter
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ShareCountUpdateInput {
  count: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutSharesInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneWithoutSharesInput
  shareType: EnumShareTypeFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutSharesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShareCountUpdateManyMutationInput {
  count: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  shareType: EnumShareTypeFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShareCountUpdateManyWithWhereWithoutDesignInput {
  data: ShareCountUpdateManyMutationInput!
  where: ShareCountScalarWhereInput!
}

input ShareCountUpdateManyWithWhereWithoutPostInput {
  data: ShareCountUpdateManyMutationInput!
  where: ShareCountScalarWhereInput!
}

input ShareCountUpdateManyWithWhereWithoutThoughtInput {
  data: ShareCountUpdateManyMutationInput!
  where: ShareCountScalarWhereInput!
}

input ShareCountUpdateManyWithoutDesignInput {
  connect: [ShareCountWhereUniqueInput!]
  connectOrCreate: [ShareCountCreateOrConnectWithoutDesignInput!]
  create: [ShareCountCreateWithoutDesignInput!]
  createMany: ShareCountCreateManyDesignInputEnvelope
  delete: [ShareCountWhereUniqueInput!]
  deleteMany: [ShareCountScalarWhereInput!]
  disconnect: [ShareCountWhereUniqueInput!]
  set: [ShareCountWhereUniqueInput!]
  update: [ShareCountUpdateWithWhereUniqueWithoutDesignInput!]
  updateMany: [ShareCountUpdateManyWithWhereWithoutDesignInput!]
  upsert: [ShareCountUpsertWithWhereUniqueWithoutDesignInput!]
}

input ShareCountUpdateManyWithoutPostInput {
  connect: [ShareCountWhereUniqueInput!]
  connectOrCreate: [ShareCountCreateOrConnectWithoutPostInput!]
  create: [ShareCountCreateWithoutPostInput!]
  createMany: ShareCountCreateManyPostInputEnvelope
  delete: [ShareCountWhereUniqueInput!]
  deleteMany: [ShareCountScalarWhereInput!]
  disconnect: [ShareCountWhereUniqueInput!]
  set: [ShareCountWhereUniqueInput!]
  update: [ShareCountUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ShareCountUpdateManyWithWhereWithoutPostInput!]
  upsert: [ShareCountUpsertWithWhereUniqueWithoutPostInput!]
}

input ShareCountUpdateManyWithoutThoughtInput {
  connect: [ShareCountWhereUniqueInput!]
  connectOrCreate: [ShareCountCreateOrConnectWithoutThoughtInput!]
  create: [ShareCountCreateWithoutThoughtInput!]
  createMany: ShareCountCreateManyThoughtInputEnvelope
  delete: [ShareCountWhereUniqueInput!]
  deleteMany: [ShareCountScalarWhereInput!]
  disconnect: [ShareCountWhereUniqueInput!]
  set: [ShareCountWhereUniqueInput!]
  update: [ShareCountUpdateWithWhereUniqueWithoutThoughtInput!]
  updateMany: [ShareCountUpdateManyWithWhereWithoutThoughtInput!]
  upsert: [ShareCountUpsertWithWhereUniqueWithoutThoughtInput!]
}

input ShareCountUpdateWithWhereUniqueWithoutDesignInput {
  data: ShareCountUpdateWithoutDesignInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountUpdateWithWhereUniqueWithoutPostInput {
  data: ShareCountUpdateWithoutPostInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountUpdateWithWhereUniqueWithoutThoughtInput {
  data: ShareCountUpdateWithoutThoughtInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountUpdateWithoutDesignInput {
  count: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneWithoutSharesInput
  shareType: EnumShareTypeFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutSharesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShareCountUpdateWithoutPostInput {
  count: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutSharesInput
  id: StringFieldUpdateOperationsInput
  shareType: EnumShareTypeFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  thought: ThoughtUpdateOneWithoutSharesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShareCountUpdateWithoutThoughtInput {
  count: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  design: DesignUpdateOneWithoutSharesInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneWithoutSharesInput
  shareType: EnumShareTypeFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShareCountUpsertWithWhereUniqueWithoutDesignInput {
  create: ShareCountCreateWithoutDesignInput!
  update: ShareCountUpdateWithoutDesignInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountUpsertWithWhereUniqueWithoutPostInput {
  create: ShareCountCreateWithoutPostInput!
  update: ShareCountUpdateWithoutPostInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountUpsertWithWhereUniqueWithoutThoughtInput {
  create: ShareCountCreateWithoutThoughtInput!
  update: ShareCountUpdateWithoutThoughtInput!
  where: ShareCountWhereUniqueInput!
}

input ShareCountWhereInput {
  AND: [ShareCountWhereInput!]
  NOT: [ShareCountWhereInput!]
  OR: [ShareCountWhereInput!]
  count: IntFilter
  createdAt: DateTimeFilter
  design: DesignWhereInput
  designId: StringNullableFilter
  id: StringFilter
  post: PostWhereInput
  postId: StringNullableFilter
  shareType: EnumShareTypeFilter
  targetId: StringFilter
  thought: ThoughtWhereInput
  thoughtId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ShareCountWhereUniqueInput {
  id: String
}

enum ShareType {
  REDDIT
  TELEGRAM
  TWITTER
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscriber implements Node {
  blog: Blog!
  createdAt: DateTime!
  email: String!

  """ID for a resource"""
  id: ID
  unsubscribedAt: DateTime
  updatedAt: DateTime!
}

input SubscriberCreateManyBlogInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  unsubscribedAt: DateTime
  updatedAt: DateTime
}

input SubscriberCreateManyBlogInputEnvelope {
  data: [SubscriberCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input SubscriberCreateNestedManyWithoutBlogInput {
  connect: [SubscriberWhereUniqueInput!]
  connectOrCreate: [SubscriberCreateOrConnectWithoutBlogInput!]
  create: [SubscriberCreateWithoutBlogInput!]
  createMany: SubscriberCreateManyBlogInputEnvelope
}

input SubscriberCreateOrConnectWithoutBlogInput {
  create: SubscriberCreateWithoutBlogInput!
  where: SubscriberWhereUniqueInput!
}

input SubscriberCreateWithoutBlogInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  unsubscribedAt: DateTime
  updatedAt: DateTime
}

input SubscriberListRelationFilter {
  every: SubscriberWhereInput
  none: SubscriberWhereInput
  some: SubscriberWhereInput
}

input SubscriberScalarWhereInput {
  AND: [SubscriberScalarWhereInput!]
  NOT: [SubscriberScalarWhereInput!]
  OR: [SubscriberScalarWhereInput!]
  blogId: StringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  unsubscribedAt: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input SubscriberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  unsubscribedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriberUpdateManyWithWhereWithoutBlogInput {
  data: SubscriberUpdateManyMutationInput!
  where: SubscriberScalarWhereInput!
}

input SubscriberUpdateManyWithoutBlogInput {
  connect: [SubscriberWhereUniqueInput!]
  connectOrCreate: [SubscriberCreateOrConnectWithoutBlogInput!]
  create: [SubscriberCreateWithoutBlogInput!]
  createMany: SubscriberCreateManyBlogInputEnvelope
  delete: [SubscriberWhereUniqueInput!]
  deleteMany: [SubscriberScalarWhereInput!]
  disconnect: [SubscriberWhereUniqueInput!]
  set: [SubscriberWhereUniqueInput!]
  update: [SubscriberUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [SubscriberUpdateManyWithWhereWithoutBlogInput!]
  upsert: [SubscriberUpsertWithWhereUniqueWithoutBlogInput!]
}

input SubscriberUpdateWithWhereUniqueWithoutBlogInput {
  data: SubscriberUpdateWithoutBlogInput!
  where: SubscriberWhereUniqueInput!
}

input SubscriberUpdateWithoutBlogInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  unsubscribedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriberUpsertWithWhereUniqueWithoutBlogInput {
  create: SubscriberCreateWithoutBlogInput!
  update: SubscriberUpdateWithoutBlogInput!
  where: SubscriberWhereUniqueInput!
}

input SubscriberWhereInput {
  AND: [SubscriberWhereInput!]
  NOT: [SubscriberWhereInput!]
  OR: [SubscriberWhereInput!]
  blog: BlogWhereInput
  blogId: StringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  unsubscribedAt: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input SubscriberWhereUniqueInput {
  email: String
  id: String
}

type Tag implements Node {
  createdAt: DateTime!

  """ID for a resource"""
  id: ID
  mainColor: String
  name: String!
  papers(after: PaperWhereUniqueInput, before: PaperWhereUniqueInput, first: Int, last: Int): [Paper!]!
  papersConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PaperConnection
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  postsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PostConnection
  projectConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ProjectConnection
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  secondaryColor: String
  thoughts(after: ThoughtWhereUniqueInput, before: ThoughtWhereUniqueInput, first: Int, last: Int): [Thought!]!
  thoughtsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ThoughtConnection
  updatedAt: DateTime!
}

type TagConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TagEdge]

  """Flattened list of Tag type"""
  nodes: [Tag]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input TagCreateInput {
  blog: BlogCreateNestedOneWithoutTagsInput!
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutTagsInput
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  papers: PaperCreateNestedManyWithoutTagsInput
  posts: PostCreateNestedManyWithoutTagsInput
  projects: ProjectCreateNestedManyWithoutTagsInput
  secondaryColor: String
  thoughts: ThoughtCreateNestedManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateManyBlogInput {
  createdAt: DateTime
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  secondaryColor: String
  updatedAt: DateTime
}

input TagCreateManyBlogInputEnvelope {
  data: [TagCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input TagCreateNestedManyWithoutBlogInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutBlogInput!]
  create: [TagCreateWithoutBlogInput!]
  createMany: TagCreateManyBlogInputEnvelope
}

input TagCreateNestedManyWithoutDesignsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutDesignsInput!]
  create: [TagCreateWithoutDesignsInput!]
}

input TagCreateNestedManyWithoutPapersInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPapersInput!]
  create: [TagCreateWithoutPapersInput!]
}

input TagCreateNestedManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateNestedManyWithoutProjectsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutProjectsInput!]
  create: [TagCreateWithoutProjectsInput!]
}

input TagCreateNestedManyWithoutThoughtsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutThoughtsInput!]
  create: [TagCreateWithoutThoughtsInput!]
}

input TagCreateOrConnectWithoutBlogInput {
  create: TagCreateWithoutBlogInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutDesignsInput {
  create: TagCreateWithoutDesignsInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutPapersInput {
  create: TagCreateWithoutPapersInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutProjectsInput {
  create: TagCreateWithoutProjectsInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutThoughtsInput {
  create: TagCreateWithoutThoughtsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutBlogInput {
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutTagsInput
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  papers: PaperCreateNestedManyWithoutTagsInput
  posts: PostCreateNestedManyWithoutTagsInput
  projects: ProjectCreateNestedManyWithoutTagsInput
  secondaryColor: String
  thoughts: ThoughtCreateNestedManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateWithoutDesignsInput {
  blog: BlogCreateNestedOneWithoutTagsInput!
  createdAt: DateTime
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  papers: PaperCreateNestedManyWithoutTagsInput
  posts: PostCreateNestedManyWithoutTagsInput
  projects: ProjectCreateNestedManyWithoutTagsInput
  secondaryColor: String
  thoughts: ThoughtCreateNestedManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateWithoutPapersInput {
  blog: BlogCreateNestedOneWithoutTagsInput!
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutTagsInput
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  posts: PostCreateNestedManyWithoutTagsInput
  projects: ProjectCreateNestedManyWithoutTagsInput
  secondaryColor: String
  thoughts: ThoughtCreateNestedManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateWithoutPostsInput {
  blog: BlogCreateNestedOneWithoutTagsInput!
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutTagsInput
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  papers: PaperCreateNestedManyWithoutTagsInput
  projects: ProjectCreateNestedManyWithoutTagsInput
  secondaryColor: String
  thoughts: ThoughtCreateNestedManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateWithoutProjectsInput {
  blog: BlogCreateNestedOneWithoutTagsInput!
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutTagsInput
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  papers: PaperCreateNestedManyWithoutTagsInput
  posts: PostCreateNestedManyWithoutTagsInput
  secondaryColor: String
  thoughts: ThoughtCreateNestedManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateWithoutThoughtsInput {
  blog: BlogCreateNestedOneWithoutTagsInput!
  createdAt: DateTime
  designs: DesignCreateNestedManyWithoutTagsInput
  headerImgUrl: String
  id: String
  mainColor: String
  name: String!
  papers: PaperCreateNestedManyWithoutTagsInput
  posts: PostCreateNestedManyWithoutTagsInput
  projects: ProjectCreateNestedManyWithoutTagsInput
  secondaryColor: String
  updatedAt: DateTime
}

type TagEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Tag
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  blogId: StringFilter
  createdAt: DateTimeFilter
  headerImgUrl: StringNullableFilter
  id: StringFilter
  mainColor: StringNullableFilter
  name: StringFilter
  secondaryColor: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TagUpdateInput {
  blog: BlogUpdateOneRequiredWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutTagsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutTagsInput
  posts: PostUpdateManyWithoutTagsInput
  projects: ProjectUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thoughts: ThoughtUpdateManyWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyWithWhereWithoutBlogInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutDesignsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutPapersInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutPostsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutProjectsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutThoughtsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutBlogInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutBlogInput!]
  create: [TagCreateWithoutBlogInput!]
  createMany: TagCreateManyBlogInputEnvelope
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [TagUpdateManyWithWhereWithoutBlogInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutBlogInput!]
}

input TagUpdateManyWithoutDesignsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutDesignsInput!]
  create: [TagCreateWithoutDesignsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutDesignsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutDesignsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutDesignsInput!]
}

input TagUpdateManyWithoutPapersInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPapersInput!]
  create: [TagCreateWithoutPapersInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPapersInput!]
  updateMany: [TagUpdateManyWithWhereWithoutPapersInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPapersInput!]
}

input TagUpdateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
}

input TagUpdateManyWithoutProjectsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutProjectsInput!]
  create: [TagCreateWithoutProjectsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProjectsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutProjectsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProjectsInput!]
}

input TagUpdateManyWithoutThoughtsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutThoughtsInput!]
  create: [TagCreateWithoutThoughtsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutThoughtsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutThoughtsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutThoughtsInput!]
}

input TagUpdateWithWhereUniqueWithoutBlogInput {
  data: TagUpdateWithoutBlogInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutDesignsInput {
  data: TagUpdateWithoutDesignsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutPapersInput {
  data: TagUpdateWithoutPapersInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  data: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutProjectsInput {
  data: TagUpdateWithoutProjectsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutThoughtsInput {
  data: TagUpdateWithoutThoughtsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutBlogInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutTagsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutTagsInput
  posts: PostUpdateManyWithoutTagsInput
  projects: ProjectUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thoughts: ThoughtUpdateManyWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutDesignsInput {
  blog: BlogUpdateOneRequiredWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutTagsInput
  posts: PostUpdateManyWithoutTagsInput
  projects: ProjectUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thoughts: ThoughtUpdateManyWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutPapersInput {
  blog: BlogUpdateOneRequiredWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutTagsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutTagsInput
  projects: ProjectUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thoughts: ThoughtUpdateManyWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutPostsInput {
  blog: BlogUpdateOneRequiredWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutTagsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutTagsInput
  projects: ProjectUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thoughts: ThoughtUpdateManyWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutProjectsInput {
  blog: BlogUpdateOneRequiredWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutTagsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutTagsInput
  posts: PostUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  thoughts: ThoughtUpdateManyWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutThoughtsInput {
  blog: BlogUpdateOneRequiredWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutTagsInput
  headerImgUrl: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mainColor: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutTagsInput
  posts: PostUpdateManyWithoutTagsInput
  projects: ProjectUpdateManyWithoutTagsInput
  secondaryColor: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithWhereUniqueWithoutBlogInput {
  create: TagCreateWithoutBlogInput!
  update: TagUpdateWithoutBlogInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutDesignsInput {
  create: TagCreateWithoutDesignsInput!
  update: TagUpdateWithoutDesignsInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPapersInput {
  create: TagCreateWithoutPapersInput!
  update: TagUpdateWithoutPapersInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  update: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutProjectsInput {
  create: TagCreateWithoutProjectsInput!
  update: TagUpdateWithoutProjectsInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutThoughtsInput {
  create: TagCreateWithoutThoughtsInput!
  update: TagUpdateWithoutThoughtsInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  blog: BlogWhereInput
  blogId: StringFilter
  createdAt: DateTimeFilter
  designs: DesignListRelationFilter
  headerImgUrl: StringNullableFilter
  id: StringFilter
  mainColor: StringNullableFilter
  name: StringFilter
  papers: PaperListRelationFilter
  posts: PostListRelationFilter
  projects: ProjectListRelationFilter
  secondaryColor: StringNullableFilter
  thoughts: ThoughtListRelationFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  id: String
  name: String
}

type Thought implements Node {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): CommentConnection
  content: String!
  createdAt: DateTime!
  editedAt: DateTime

  """ID for a resource"""
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  imagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  reactions(after: ReactionWhereUniqueInput, before: ReactionWhereUniqueInput, first: Int, last: Int): [Reaction!]!
  reactionsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ReactionConnection
  shares(after: ShareCountWhereUniqueInput, before: ShareCountWhereUniqueInput, first: Int, last: Int): [ShareCount!]!
  sharesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ShareCountConnection
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  tagsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): TagConnection
  updatedAt: DateTime!
  visibility: Visibility!
}

type ThoughtConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ThoughtEdge]

  """Flattened list of Thought type"""
  nodes: [Thought]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input ThoughtCreateInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  owner: UserCreateNestedOneWithoutThoughtsInput!
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateManyBlogInput {
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  ownerId: String!
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateManyBlogInputEnvelope {
  data: [ThoughtCreateManyBlogInput!]
  skipDuplicates: Boolean
}

input ThoughtCreateManyOwnerInput {
  blogId: String!
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateManyOwnerInputEnvelope {
  data: [ThoughtCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input ThoughtCreateNestedManyWithoutBlogInput {
  connect: [ThoughtWhereUniqueInput!]
  connectOrCreate: [ThoughtCreateOrConnectWithoutBlogInput!]
  create: [ThoughtCreateWithoutBlogInput!]
  createMany: ThoughtCreateManyBlogInputEnvelope
}

input ThoughtCreateNestedManyWithoutOwnerInput {
  connect: [ThoughtWhereUniqueInput!]
  connectOrCreate: [ThoughtCreateOrConnectWithoutOwnerInput!]
  create: [ThoughtCreateWithoutOwnerInput!]
  createMany: ThoughtCreateManyOwnerInputEnvelope
}

input ThoughtCreateNestedManyWithoutTagsInput {
  connect: [ThoughtWhereUniqueInput!]
  connectOrCreate: [ThoughtCreateOrConnectWithoutTagsInput!]
  create: [ThoughtCreateWithoutTagsInput!]
}

input ThoughtCreateNestedOneWithoutCommentsInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutCommentsInput
  create: ThoughtCreateWithoutCommentsInput
}

input ThoughtCreateNestedOneWithoutImagesInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutImagesInput
  create: ThoughtCreateWithoutImagesInput
}

input ThoughtCreateNestedOneWithoutReactionsInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutReactionsInput
  create: ThoughtCreateWithoutReactionsInput
}

input ThoughtCreateNestedOneWithoutSharesInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutSharesInput
  create: ThoughtCreateWithoutSharesInput
}

input ThoughtCreateOrConnectWithoutBlogInput {
  create: ThoughtCreateWithoutBlogInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateOrConnectWithoutCommentsInput {
  create: ThoughtCreateWithoutCommentsInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateOrConnectWithoutImagesInput {
  create: ThoughtCreateWithoutImagesInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateOrConnectWithoutOwnerInput {
  create: ThoughtCreateWithoutOwnerInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateOrConnectWithoutReactionsInput {
  create: ThoughtCreateWithoutReactionsInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateOrConnectWithoutSharesInput {
  create: ThoughtCreateWithoutSharesInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateOrConnectWithoutTagsInput {
  create: ThoughtCreateWithoutTagsInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtCreateWithoutBlogInput {
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  owner: UserCreateNestedOneWithoutThoughtsInput!
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateWithoutCommentsInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  owner: UserCreateNestedOneWithoutThoughtsInput!
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateWithoutImagesInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  owner: UserCreateNestedOneWithoutThoughtsInput!
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateWithoutOwnerInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateWithoutReactionsInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  owner: UserCreateNestedOneWithoutThoughtsInput!
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateWithoutSharesInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  owner: UserCreateNestedOneWithoutThoughtsInput!
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  tags: TagCreateNestedManyWithoutThoughtsInput
  updatedAt: DateTime
  visibility: Visibility
}

input ThoughtCreateWithoutTagsInput {
  blog: BlogCreateNestedOneWithoutThoughtsInput!
  comments: CommentCreateNestedManyWithoutThoughtInput
  content: String!
  createdAt: DateTime
  editedAt: DateTime
  id: String
  images: ImageCreateNestedManyWithoutThoughtInput
  owner: UserCreateNestedOneWithoutThoughtsInput!
  reactions: ReactionCreateNestedManyWithoutThoughtInput
  shares: ShareCountCreateNestedManyWithoutThoughtInput
  updatedAt: DateTime
  visibility: Visibility
}

type ThoughtEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Thought
}

input ThoughtListRelationFilter {
  every: ThoughtWhereInput
  none: ThoughtWhereInput
  some: ThoughtWhereInput
}

input ThoughtScalarWhereInput {
  AND: [ThoughtScalarWhereInput!]
  NOT: [ThoughtScalarWhereInput!]
  OR: [ThoughtScalarWhereInput!]
  blogId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  editedAt: DateTimeNullableFilter
  id: StringFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
  visibility: EnumVisibilityFilter
}

input ThoughtUpdateInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateManyWithWhereWithoutBlogInput {
  data: ThoughtUpdateManyMutationInput!
  where: ThoughtScalarWhereInput!
}

input ThoughtUpdateManyWithWhereWithoutOwnerInput {
  data: ThoughtUpdateManyMutationInput!
  where: ThoughtScalarWhereInput!
}

input ThoughtUpdateManyWithWhereWithoutTagsInput {
  data: ThoughtUpdateManyMutationInput!
  where: ThoughtScalarWhereInput!
}

input ThoughtUpdateManyWithoutBlogInput {
  connect: [ThoughtWhereUniqueInput!]
  connectOrCreate: [ThoughtCreateOrConnectWithoutBlogInput!]
  create: [ThoughtCreateWithoutBlogInput!]
  createMany: ThoughtCreateManyBlogInputEnvelope
  delete: [ThoughtWhereUniqueInput!]
  deleteMany: [ThoughtScalarWhereInput!]
  disconnect: [ThoughtWhereUniqueInput!]
  set: [ThoughtWhereUniqueInput!]
  update: [ThoughtUpdateWithWhereUniqueWithoutBlogInput!]
  updateMany: [ThoughtUpdateManyWithWhereWithoutBlogInput!]
  upsert: [ThoughtUpsertWithWhereUniqueWithoutBlogInput!]
}

input ThoughtUpdateManyWithoutOwnerInput {
  connect: [ThoughtWhereUniqueInput!]
  connectOrCreate: [ThoughtCreateOrConnectWithoutOwnerInput!]
  create: [ThoughtCreateWithoutOwnerInput!]
  createMany: ThoughtCreateManyOwnerInputEnvelope
  delete: [ThoughtWhereUniqueInput!]
  deleteMany: [ThoughtScalarWhereInput!]
  disconnect: [ThoughtWhereUniqueInput!]
  set: [ThoughtWhereUniqueInput!]
  update: [ThoughtUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ThoughtUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ThoughtUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ThoughtUpdateManyWithoutTagsInput {
  connect: [ThoughtWhereUniqueInput!]
  connectOrCreate: [ThoughtCreateOrConnectWithoutTagsInput!]
  create: [ThoughtCreateWithoutTagsInput!]
  delete: [ThoughtWhereUniqueInput!]
  deleteMany: [ThoughtScalarWhereInput!]
  disconnect: [ThoughtWhereUniqueInput!]
  set: [ThoughtWhereUniqueInput!]
  update: [ThoughtUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [ThoughtUpdateManyWithWhereWithoutTagsInput!]
  upsert: [ThoughtUpsertWithWhereUniqueWithoutTagsInput!]
}

input ThoughtUpdateOneWithoutCommentsInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutCommentsInput
  create: ThoughtCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: ThoughtUpdateWithoutCommentsInput
  upsert: ThoughtUpsertWithoutCommentsInput
}

input ThoughtUpdateOneWithoutImagesInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutImagesInput
  create: ThoughtCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: ThoughtUpdateWithoutImagesInput
  upsert: ThoughtUpsertWithoutImagesInput
}

input ThoughtUpdateOneWithoutReactionsInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutReactionsInput
  create: ThoughtCreateWithoutReactionsInput
  delete: Boolean
  disconnect: Boolean
  update: ThoughtUpdateWithoutReactionsInput
  upsert: ThoughtUpsertWithoutReactionsInput
}

input ThoughtUpdateOneWithoutSharesInput {
  connect: ThoughtWhereUniqueInput
  connectOrCreate: ThoughtCreateOrConnectWithoutSharesInput
  create: ThoughtCreateWithoutSharesInput
  delete: Boolean
  disconnect: Boolean
  update: ThoughtUpdateWithoutSharesInput
  upsert: ThoughtUpsertWithoutSharesInput
}

input ThoughtUpdateWithWhereUniqueWithoutBlogInput {
  data: ThoughtUpdateWithoutBlogInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtUpdateWithWhereUniqueWithoutOwnerInput {
  data: ThoughtUpdateWithoutOwnerInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtUpdateWithWhereUniqueWithoutTagsInput {
  data: ThoughtUpdateWithoutTagsInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtUpdateWithoutBlogInput {
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateWithoutCommentsInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateWithoutImagesInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateWithoutOwnerInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateWithoutReactionsInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateWithoutSharesInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  tags: TagUpdateManyWithoutThoughtsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpdateWithoutTagsInput {
  blog: BlogUpdateOneRequiredWithoutThoughtsInput
  comments: CommentUpdateManyWithoutThoughtInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutThoughtInput
  owner: UserUpdateOneRequiredWithoutThoughtsInput
  reactions: ReactionUpdateManyWithoutThoughtInput
  shares: ShareCountUpdateManyWithoutThoughtInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visibility: EnumVisibilityFieldUpdateOperationsInput
}

input ThoughtUpsertWithWhereUniqueWithoutBlogInput {
  create: ThoughtCreateWithoutBlogInput!
  update: ThoughtUpdateWithoutBlogInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtUpsertWithWhereUniqueWithoutOwnerInput {
  create: ThoughtCreateWithoutOwnerInput!
  update: ThoughtUpdateWithoutOwnerInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtUpsertWithWhereUniqueWithoutTagsInput {
  create: ThoughtCreateWithoutTagsInput!
  update: ThoughtUpdateWithoutTagsInput!
  where: ThoughtWhereUniqueInput!
}

input ThoughtUpsertWithoutCommentsInput {
  create: ThoughtCreateWithoutCommentsInput!
  update: ThoughtUpdateWithoutCommentsInput!
}

input ThoughtUpsertWithoutImagesInput {
  create: ThoughtCreateWithoutImagesInput!
  update: ThoughtUpdateWithoutImagesInput!
}

input ThoughtUpsertWithoutReactionsInput {
  create: ThoughtCreateWithoutReactionsInput!
  update: ThoughtUpdateWithoutReactionsInput!
}

input ThoughtUpsertWithoutSharesInput {
  create: ThoughtCreateWithoutSharesInput!
  update: ThoughtUpdateWithoutSharesInput!
}

input ThoughtWhereInput {
  AND: [ThoughtWhereInput!]
  NOT: [ThoughtWhereInput!]
  OR: [ThoughtWhereInput!]
  blog: BlogWhereInput
  blogId: StringFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  editedAt: DateTimeNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  owner: UserWhereInput
  ownerId: StringFilter
  reactions: ReactionListRelationFilter
  shares: ShareCountListRelationFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  visibility: EnumVisibilityFilter
}

input ThoughtWhereUniqueInput {
  id: String
}

type Translation implements Node {
  content: Json!
  createdAt: DateTime!
  editedAt: DateTime

  """ID for a resource"""
  id: ID
  language: Language!
  type: TranslationType!
  updatedAt: DateTime!
}

type TranslationConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TranslationEdge]

  """Flattened list of Translation type"""
  nodes: [Translation]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TranslationEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Translation
}

enum TranslationType {
  BLOG
  PAPER
  POST
  PROJECT
  TAG
  THOUGHT
  USER
  USER_ROLE
}

input TranslationWhereUniqueInput {
  id: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Commendable & Node {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  commentsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): CommentConnection
  createdAt: DateTime!
  description: String
  email: String

  """ID for a resource"""
  id: ID
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  imagesConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ImageConnection
  name: String
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  postsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): PostConnection
  profileImageUrl: String
  roles(after: UserRoleWhereUniqueInput, before: UserRoleWhereUniqueInput, first: Int, last: Int): [UserRole!]!
  scopes: [String]!
  thoughts(after: ThoughtWhereUniqueInput, before: ThoughtWhereUniqueInput, first: Int, last: Int): [Thought!]!
  thoughtsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): ThoughtConnection
  updatedAt: DateTime!
  website: String
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """Flattened list of User type"""
  nodes: [User]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input UserCreateNestedManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRolesInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateNestedOneWithoutAccessTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccessTokensInput
  create: UserCreateWithoutAccessTokensInput
}

input UserCreateNestedOneWithoutBlogsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBlogsInput
  create: UserCreateWithoutBlogsInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutDesignsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutDesignsInput
  create: UserCreateWithoutDesignsInput
}

input UserCreateNestedOneWithoutImagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutImagesInput
  create: UserCreateWithoutImagesInput
}

input UserCreateNestedOneWithoutOAuthAuthorizationCodesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOAuthAuthorizationCodesInput
  create: UserCreateWithoutOAuthAuthorizationCodesInput
}

input UserCreateNestedOneWithoutOAuthClientsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOAuthClientsInput
  create: UserCreateWithoutOAuthClientsInput
}

input UserCreateNestedOneWithoutPapersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPapersInput
  create: UserCreateWithoutPapersInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectsInput
  create: UserCreateWithoutProjectsInput
}

input UserCreateNestedOneWithoutRefreshTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefreshTokensInput
  create: UserCreateWithoutRefreshTokensInput
}

input UserCreateNestedOneWithoutThoughtsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutThoughtsInput
  create: UserCreateWithoutThoughtsInput
}

input UserCreateOrConnectWithoutAccessTokensInput {
  create: UserCreateWithoutAccessTokensInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutBlogsInput {
  create: UserCreateWithoutBlogsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutDesignsInput {
  create: UserCreateWithoutDesignsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutImagesInput {
  create: UserCreateWithoutImagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutOAuthAuthorizationCodesInput {
  create: UserCreateWithoutOAuthAuthorizationCodesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutOAuthClientsInput {
  create: UserCreateWithoutOAuthClientsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPapersInput {
  create: UserCreateWithoutPapersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRefreshTokensInput {
  create: UserCreateWithoutRefreshTokensInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutThoughtsInput {
  create: UserCreateWithoutThoughtsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccessTokensInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutBlogsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutCommentsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutDesignsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutImagesInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutOAuthAuthorizationCodesInput {
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutOAuthClientsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutPapersInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutPostsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutProjectsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutRefreshTokensInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  roles: UserRoleCreateNestedManyWithoutUsersInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutRolesInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  thoughts: ThoughtCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
  website: String
}

input UserCreateWithoutThoughtsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeCreateNestedManyWithoutUserInput
  OAuthClients: OAuthClientCreateNestedManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenCreateNestedManyWithoutUserInput
  blogs: BlogCreateNestedManyWithoutOwnerInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  description: String
  designs: DesignCreateNestedManyWithoutOwnerInput
  email: String
  id: String
  images: ImageCreateNestedManyWithoutOwnerInput
  name: String
  openid: String
  papers: PaperCreateNestedManyWithoutOwnerInput
  password: String
  posts: PostCreateNestedManyWithoutOwnerInput
  profileImageUrl: String
  projects: ProjectCreateNestedManyWithoutOwnerInput
  provider: OAuthProviders
  refreshTokens: OAuthRefreshTokenCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  website: String
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserRole implements Node {
  createdAt: DateTime!

  """ID for a resource"""
  id: ID
  name: String!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  usersConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: [OrderBy!]
  ): UserConnection
  value: String!
}

input UserRoleCreateNestedManyWithoutScopesInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutScopesInput!]
  create: [UserRoleCreateWithoutScopesInput!]
}

input UserRoleCreateNestedManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutUsersInput!]
  create: [UserRoleCreateWithoutUsersInput!]
}

input UserRoleCreateOrConnectWithoutScopesInput {
  create: UserRoleCreateWithoutScopesInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleCreateOrConnectWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleCreateWithoutScopesInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutRolesInput
  value: String!
}

input UserRoleCreateWithoutUsersInput {
  createdAt: DateTime
  id: String
  name: String!
  scopes: OAuthScopeCreateNestedManyWithoutRolesInput
  updatedAt: DateTime
  value: String!
}

input UserRoleListRelationFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  NOT: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input UserRoleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input UserRoleUpdateManyWithWhereWithoutScopesInput {
  data: UserRoleUpdateManyMutationInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateManyWithWhereWithoutUsersInput {
  data: UserRoleUpdateManyMutationInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateManyWithoutScopesInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutScopesInput!]
  create: [UserRoleCreateWithoutScopesInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutScopesInput!]
  updateMany: [UserRoleUpdateManyWithWhereWithoutScopesInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutScopesInput!]
}

input UserRoleUpdateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutUsersInput!]
  create: [UserRoleCreateWithoutUsersInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [UserRoleUpdateManyWithWhereWithoutUsersInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input UserRoleUpdateWithWhereUniqueWithoutScopesInput {
  data: UserRoleUpdateWithoutScopesInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: UserRoleUpdateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpdateWithoutScopesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutRolesInput
  value: StringFieldUpdateOperationsInput
}

input UserRoleUpdateWithoutUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  scopes: OAuthScopeUpdateManyWithoutRolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input UserRoleUpsertWithWhereUniqueWithoutScopesInput {
  create: UserRoleCreateWithoutScopesInput!
  update: UserRoleUpdateWithoutScopesInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput!
  update: UserRoleUpdateWithoutUsersInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  scopes: OAuthScopeListRelationFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
  value: StringFilter
}

input UserRoleWhereUniqueInput {
  id: String
  value: String
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  email: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  openid: StringNullableFilter
  password: StringNullableFilter
  profileImageUrl: StringNullableFilter
  provider: EnumOAuthProvidersNullableFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutRolesInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRolesInput!]
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereWithoutRolesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateOneRequiredWithoutAccessTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccessTokensInput
  create: UserCreateWithoutAccessTokensInput
  update: UserUpdateWithoutAccessTokensInput
  upsert: UserUpsertWithoutAccessTokensInput
}

input UserUpdateOneRequiredWithoutBlogsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBlogsInput
  create: UserCreateWithoutBlogsInput
  update: UserUpdateWithoutBlogsInput
  upsert: UserUpsertWithoutBlogsInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutDesignsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutDesignsInput
  create: UserCreateWithoutDesignsInput
  update: UserUpdateWithoutDesignsInput
  upsert: UserUpsertWithoutDesignsInput
}

input UserUpdateOneRequiredWithoutImagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutImagesInput
  create: UserCreateWithoutImagesInput
  update: UserUpdateWithoutImagesInput
  upsert: UserUpsertWithoutImagesInput
}

input UserUpdateOneRequiredWithoutOAuthAuthorizationCodesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOAuthAuthorizationCodesInput
  create: UserCreateWithoutOAuthAuthorizationCodesInput
  update: UserUpdateWithoutOAuthAuthorizationCodesInput
  upsert: UserUpsertWithoutOAuthAuthorizationCodesInput
}

input UserUpdateOneRequiredWithoutOAuthClientsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOAuthClientsInput
  create: UserCreateWithoutOAuthClientsInput
  update: UserUpdateWithoutOAuthClientsInput
  upsert: UserUpsertWithoutOAuthClientsInput
}

input UserUpdateOneRequiredWithoutPapersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPapersInput
  create: UserCreateWithoutPapersInput
  update: UserUpdateWithoutPapersInput
  upsert: UserUpsertWithoutPapersInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectsInput
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneRequiredWithoutRefreshTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefreshTokensInput
  create: UserCreateWithoutRefreshTokensInput
  update: UserUpdateWithoutRefreshTokensInput
  upsert: UserUpsertWithoutRefreshTokensInput
}

input UserUpdateOneRequiredWithoutThoughtsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutThoughtsInput
  create: UserCreateWithoutThoughtsInput
  update: UserUpdateWithoutThoughtsInput
  upsert: UserUpsertWithoutThoughtsInput
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  data: UserUpdateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutAccessTokensInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutBlogsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutDesignsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutImagesInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutOAuthAuthorizationCodesInput {
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutOAuthClientsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutPapersInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutProjectsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutRefreshTokensInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  roles: UserRoleUpdateManyWithoutUsersInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutRolesInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  thoughts: ThoughtUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutThoughtsInput {
  OAuthAuthorizationCodes: OAuthAuthorizationCodeUpdateManyWithoutUserInput
  OAuthClients: OAuthClientUpdateManyWithoutOwnerInput
  accessTokens: OAuthAccessTokenUpdateManyWithoutUserInput
  blogs: BlogUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  designs: DesignUpdateManyWithoutOwnerInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutOwnerInput
  name: NullableStringFieldUpdateOperationsInput
  openid: NullableStringFieldUpdateOperationsInput
  papers: PaperUpdateManyWithoutOwnerInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutOwnerInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutOwnerInput
  provider: NullableEnumOAuthProvidersFieldUpdateOperationsInput
  refreshTokens: OAuthRefreshTokenUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  update: UserUpdateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAccessTokensInput {
  create: UserCreateWithoutAccessTokensInput!
  update: UserUpdateWithoutAccessTokensInput!
}

input UserUpsertWithoutBlogsInput {
  create: UserCreateWithoutBlogsInput!
  update: UserUpdateWithoutBlogsInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutDesignsInput {
  create: UserCreateWithoutDesignsInput!
  update: UserUpdateWithoutDesignsInput!
}

input UserUpsertWithoutImagesInput {
  create: UserCreateWithoutImagesInput!
  update: UserUpdateWithoutImagesInput!
}

input UserUpsertWithoutOAuthAuthorizationCodesInput {
  create: UserCreateWithoutOAuthAuthorizationCodesInput!
  update: UserUpdateWithoutOAuthAuthorizationCodesInput!
}

input UserUpsertWithoutOAuthClientsInput {
  create: UserCreateWithoutOAuthClientsInput!
  update: UserUpdateWithoutOAuthClientsInput!
}

input UserUpsertWithoutPapersInput {
  create: UserCreateWithoutPapersInput!
  update: UserUpdateWithoutPapersInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserUpsertWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  update: UserUpdateWithoutProjectsInput!
}

input UserUpsertWithoutRefreshTokensInput {
  create: UserCreateWithoutRefreshTokensInput!
  update: UserUpdateWithoutRefreshTokensInput!
}

input UserUpsertWithoutThoughtsInput {
  create: UserCreateWithoutThoughtsInput!
  update: UserUpdateWithoutThoughtsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OAuthAuthorizationCodes: OAuthAuthorizationCodeListRelationFilter
  OAuthClients: OAuthClientListRelationFilter
  OR: [UserWhereInput!]
  accessTokens: OAuthAccessTokenListRelationFilter
  blogs: BlogListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  designs: DesignListRelationFilter
  email: StringNullableFilter
  id: StringFilter
  images: ImageListRelationFilter
  name: StringNullableFilter
  openid: StringNullableFilter
  papers: PaperListRelationFilter
  password: StringNullableFilter
  posts: PostListRelationFilter
  profileImageUrl: StringNullableFilter
  projects: ProjectListRelationFilter
  provider: EnumOAuthProvidersNullableFilter
  refreshTokens: OAuthRefreshTokenListRelationFilter
  roles: UserRoleListRelationFilter
  thoughts: ThoughtListRelationFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input UserWhereUniqueInput {
  id: String
}

enum Visibility {
  DRAFT
  PRIVATE
  PUBLISHED
}

"""Represents NULL values"""
scalar Void

type creatCommentResponse {
  createCommentEdge: CommentEdge!
}

type creatPostResponse {
  createPostEdge: PostEdge!
}

input createImageInput {
  url: String!
}

input createPostInput {
  content: String!
  headerImageUrl: String
  images: [createImageInput!]
  tags: [createTagInput!]
  title: String!
  visibility: Visibility!
}

input createTagInput {
  name: String!
}

enum sortOrder {
  asc
  desc
}

input whereUniqueInput {
  id: String
}
