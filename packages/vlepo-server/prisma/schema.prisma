datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi"]
}

enum Language {
  ab
  aa
  af
  ak
  sq
  am
  ar
  an
  hy
  as
  av
  ae
  ay
  az
  bm
  ba
  eu
  be
  bn
  bh
  bi
  bs
  br
  bg
  my
  ca
  ch
  ce
  ny
  zh
  cv
  kw
  co
  cr
  hr
  cs
  da
  dv
  nl
  dz
  en
  eo
  et
  ee
  fo
  fj
  fi
  fr
  ff
  gl
  ka
  de
  el
  gn
  gu
  ht
  ha
  he
  hz
  hi
  ho
  hu
  ia
  id
  ie
  ga
  ig
  ik
  io
  is
  it
  iu
  ja
  jv
  kl
  kn
  kr
  ks
  kk
  km
  ki
  rw
  ky
  kv
  kg
  ko
  ku
  kj
  la
  lb
  lg
  li
  ln
  lo
  lt
  lu
  lv
  gv
  mk
  mg
  ms
  ml
  mt
  mi
  mr
  mh
  mn
  na
  nv
  nd
  ne
  ng
  nb
  nn
  no
  ii
  nr
  oc
  oj
  cu
  om
  or
  os
  pa
  pi
  fa
  pl
  ps
  pt
  qu
  rm
  rn
  ro
  ru
  sa
  sc
  sd
  se
  sm
  sg
  sr
  gd
  sn
  si
  sk
  sl
  so
  st
  es
  su
  sw
  ss
  sv
  ta
  te
  tg
  th
  ti
  bo
  tk
  tl
  tn
  to
  tr
  ts
  tt
  tw
  ty
  ug
  uk
  ur
  uz
  ve
  vi
  vo
  wa
  cy
  wo
  fy
  xh
  yi
  yo
  za
  zu
}

model Blog {
  id     String  @id @default(uuid())
  name   String?
  slogan String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  visitorCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  thoughts Thought[]
  projects Project[]
  papers   Paper[]
  tags     Tag[]
  links    Link[]
  designs  Design[]
}

model UserRole {
  id    String @id @default(uuid())
  value String @unique
  name  String
  users User[]

  scopes    OAuthScope[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum OAuthProviders {
  google
  github
  reddit
  disqus
}

model User {
  id              String  @id @default(uuid())
  name            String?
  password        String?
  email           String?
  website         String?
  profileImageUrl String?
  description     String?

  blogs     Blog[]
  posts     Post[]
  roles     UserRole[]
  comments  Comment[]
  images    Image[]
  thoughts  Thought[]
  designs   Design[]
  papers    Paper[]
  projects  Project[]
  provider  OAuthProviders?
  openid    String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  accessTokens            OAuthAccessToken[]
  refreshTokens           OAuthRefreshToken[]
  OAuthClients            OAuthClient[]
  OAuthAuthorizationCodes OAuthAuthorizationCode[]
}

model Post {
  id             String     @id @default(uuid())
  ownerId        String
  content        String
  visibility     Visibility @default(DRAFT)
  title          String
  slug           String     @unique
  headerImageUrl String?
  owner          User       @relation(fields: [ownerId], references: [id])
  comments       Comment[]
  viewCount      Int        @default(0)

  ratings    Rating[]
  reactions  Reaction[]
  minuteRead Int?
  tags       Tag[]
  images     Image[]
  shares     ShareCount[]
  editedAt   DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  blog       Blog         @relation(fields: [blogId], references: [id])
  blogId     String
}

enum Visibility {
  DRAFT
  PRIVATE
  PUBLISHED

  @@map("visibility")
}

model Tag {
  id           String  @id @default(uuid())
  name         String  @unique
  headerImgUrl String?

  mainColor      String?
  secondaryColor String?

  posts    Post[]
  thoughts Thought[]
  projects Project[]
  papers   Paper[]
  designs  Design[]
  blog     Blog      @relation(fields: [blogId], references: [id])
  blogId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String    @id @default(uuid())
  owner         User      @relation(fields: [userId], references: [id])
  userId        String
  parent        Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  childComments Comment[] @relation("CommentToComment")
  parentId      String?
  content       String
  thought       Thought?  @relation(fields: [thoughtId], references: [id])
  thoughtId     String?
  post          Post?     @relation(fields: [postId], references: [id])
  postId        String?
  design        Design?   @relation(fields: [designId], references: [id])
  designId      String?
  images        Image[]
  language      Language
  editedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}

model Image {
  id      String  @id @default(uuid())
  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String
  url     String  @unique
  alt     String?

  mainColor      String?
  secondaryColor String?
  height         Int?
  width          Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  paper     Paper?   @relation(fields: [paperId], references: [id])
  paperId   String?
  design    Design?  @relation(fields: [designId], references: [id])
  designId  String?
}

model Link {
  id      String  @id @default(uuid())
  url     String
  iconUrl String?

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thought {
  id         String     @id @default(uuid())
  content    String
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    String
  visibility Visibility @default(DRAFT)
  editedAt   DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  images    Image[]
  comments  Comment[]
  reactions Reaction[]
  shares    ShareCount[]
  tags      Tag[]
  blog      Blog         @relation(fields: [blogId], references: [id])
  blogId    String
}

model Design {
  id         String     @id @default(uuid())
  content    String
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    String
  visibility Visibility @default(DRAFT)

  editedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  images    Image[]
  comments  Comment[]
  reactions Reaction[]
  shares    ShareCount[]
  tags      Tag[]
  blog      Blog         @relation(fields: [blogId], references: [id])
  blogId    String
}

model Reaction {
  id      String  @id @default(uuid())
  name    String  @unique
  iconUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  paper     Paper?   @relation(fields: [paperId], references: [id])
  paperId   String?
  design    Design?  @relation(fields: [designId], references: [id])
  designId  String?
}

model Rating {
  id      String  @id @default(uuid())
  score   Int
  comment String?
  post    Post?   @relation(fields: [postId], references: [id])
  postId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paper     Paper?   @relation(fields: [paperId], references: [id])
  paperId   String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

enum TranslationType {
  BLOG
  POST
  THOUGHT
  TAG
  USER
  USER_ROLE
  PROJECT
  PAPER
}

enum ShareType {
  REDDIT
  TWITTER
  TELEGRAM
}

model ShareCount {
  id        String    @id @default(uuid())
  targetId  String
  count     Int
  shareType ShareType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  design    Design?  @relation(fields: [designId], references: [id])
  designId  String?
}

model Translation {
  id       String          @id @default(uuid())
  targetId String
  type     TranslationType
  language Language
  content  Json

  editedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String     @id @default(uuid())
  name           String
  owner          User?      @relation(fields: [ownerId], references: [id])
  ownerId        String?
  content        String
  headerImageUrl String?
  visibility     Visibility @default(DRAFT)
  url            String?
  tags           Tag[]
  images         Image[]
  reactions      Reaction[]
  ratings        Rating[]

  blog   Blog?   @relation(fields: [blogId], references: [id])
  blogId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Paper {
  id             String     @id @default(uuid())
  name           String
  owner          User?      @relation(fields: [ownerId], references: [id])
  ownerId        String?
  content        String
  visibility     Visibility @default(DRAFT)
  url            String?
  tags           Tag[]
  headerImageUrl String?

  images    Image[]
  reactions Reaction[]
  ratings   Rating[]

  blog   Blog?   @relation(fields: [blogId], references: [id])
  blogId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OAuthScope {
  value       String  @id
  name        String
  description String?

  //self
  parentValue String?
  parent      OAuthScope?  @relation("OAuthScopeToOAuthScope", fields: [parentValue], references: [value])
  childScopes OAuthScope[] @relation("OAuthScopeToOAuthScope")

  //token
  accessTokens  OAuthAccessToken[]
  refreshTokens OAuthRefreshToken[]

  //code
  authorizationCodes OAuthAuthorizationCode[]

  //client
  clients OAuthClient[]

  //roles
  roles UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([value])
}

model OAuthAccessToken {
  accessToken          String   @id
  accessTokenExpiresAt DateTime

  //client
  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id])

  //scope
  scopes OAuthScope[]

  //user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model OAuthRefreshToken {
  refreshToken          String   @id
  refreshTokenExpiresAt DateTime

  //client
  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id])

  //scope
  scopes OAuthScope[]

  //user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

}

enum OAuthGrant {
  authorization_code
  client_credentials
  refresh_token
  password
}

model OAuthClient {
  id                   String       @id
  secret               String       @unique
  grants               OAuthGrant[]
  redirectUris         String[]
  accessTokenLifetime  Int?
  refreshTokenLifetime Int?

  //token
  accessTokens  OAuthAccessToken[]
  refreshTokens OAuthRefreshToken[]

  //user
  owner User @relation(fields: [ownerId], references: [id])

  //code
  authorizationCodes OAuthAuthorizationCode[]

  //scope
  scopes OAuthScope[]

  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([secret])
}

model OAuthAuthorizationCode {
  authorizationCode String   @id
  expiresAt         DateTime
  redirectUri       String?

  //client
  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id])

  //scope
  scopes OAuthScope[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}
