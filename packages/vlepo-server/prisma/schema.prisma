datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Language {
  en
  zh
}

model Blog {
  id           String   @id @default(uuid())
  name         String?
  visitorCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  value     String   @unique
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OAuthProviders {
  google
  github
  reddit
}

model User {
  id              String          @id @default(uuid())
  name            String?
  password        String?
  email           String?         @unique
  website         String?
  profileImageUrl String?
  description     String?
  posts           Post[]
  roles           UserRole[]
  comments        Comment[]
  images          Image[]
  thoughts        Thought[]
  provider        OAuthProviders?
  openid          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt


  accessTokens            OAuthAccessToken[]
  refreshTokens           OAuthRefreshToken[]
  OAuthClients            OAuthClient[]
  OAuthAuthorizationCodes OAuthAuthorizationCode[]
}

model Post {
  id             String       @id @default(uuid())
  ownerId        String?
  content        String?
  status         PostStatus   @default(DRAFT)
  title          String
  headerImageUrl String?
  owner          User?        @relation(fields: [ownerId], references: [id])
  comments       Comment[]
  viewCount      Int          @default(0)
  ratings        Rating[]
  reactions      Reaction[]
  minuteRead     Int?
  tags           Tag[]
  images         Image[]
  shares         ShareCount[]
  editedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum PostStatus {
  DRAFT
  PRIVATE
  PUBLISHED
}

enum ToughtStatus {
  DRAFT
  PRIVATE
  PUBLISHED
}

model Tag {
  id           String    @id @default(uuid())
  name         String    @unique
  posts        Post[]
  thoughts     Thought[]
  headerImgUrl String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  projects     Project[] @relation(fields: [projectId], references: [id])
  projectId    String?
  papers       Paper[]   @relation(fields: [paperId], references: [id])
  paperId      String?
}

model Comment {
  id            String    @id @default(uuid())
  owner         User      @relation(fields: [userId], references: [id])
  userId        String
  parent        Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  childComments Comment[] @relation("CommentToComment")
  parentId      String?
  content       String
  thought       Thought?  @relation(fields: [thoughtId], references: [id])
  thoughtId     String?
  post          Post?     @relation(fields: [postId], references: [id])
  postId        String?
  images        Image[]
  language      Language
  editedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Image {
  id             String   @id @default(uuid())
  owner          User     @relation(fields: [onwerId], references: [id])
  onwerId        String
  mainColor      String
  secondaryColor String?
  url            String
  height         Int
  width          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  paper     Paper?   @relation(fields: [paperId], references: [id])
  paperId   String?
}

model Link {
  id        String   @id @default(uuid())
  url       String
  iconUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thought {
  id        String       @id @default(uuid())
  content   String
  onwer     User         @relation(fields: [ownerId], references: [id])
  status    ToughtStatus @default(DRAFT)
  images    Image[]
  comments  Comment[]
  reactions Reaction[]
  shares    ShareCount[]
  editedAt  DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tags      Tag[]        @relation(fields: [tagId], references: [id])
  tagId     String?
  ownerId   String
}

model Reaction {
  id        String   @id @default(uuid())
  name      String   @unique
  iconUrl   String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  thought   Thought? @relation(fields: [thoughtId], references: [id])
  thoughtId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  paper     Paper?   @relation(fields: [paperId], references: [id])
  paperId   String?
}

model Rating {
  id        String   @id @default(uuid())
  score     Int
  comment   String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TranslationType {
  BLOG
  POST
  THOUGHT
  TAG
  USER
  USERROLE
  PROJECT
  PAPER
}

enum ShareType {
  REDDIT
  TWITTER
  TELEGRAM
}

model ShareCount {
  id        String    @id @default(uuid())
  targetId  String
  count     Int
  source    ShareType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?
  thought   Thought?  @relation(fields: [thoughtId], references: [id])
  thoughtId String?
}

model Translation {
  id        String          @id @default(uuid())
  targetId  String
  type      TranslationType
  language  Language
  content   Json
  editedAt  DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Project {
  id        String     @id @default(uuid())
  name      String
  content   String
  url       String?
  tags      Tag[]
  images    Image[]
  reactions Reaction[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Paper {
  id        String     @id @default(uuid())
  name      String
  content   String
  url       String?
  tags      Tag[]
  images    Image[]
  reactions Reaction[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model OAuthScope {
  value       String  @id
  name        String
  description String?

  //self
  parentId    String
  parent      OAuthScope   @relation("OAuthScopeToOAuthScope", fields: [parentId], references: [value])
  childScopes OAuthScope[] @relation("OAuthScopeToOAuthScope")

  //token
  accessTokens  OAuthAccessToken[]
  refreshTokens OAuthRefreshToken[]

  //code
  authorizationCodes OAuthAuthorizationCode[]

  //client
  clients OAuthClient[]

  @@index([value])
}

model OAuthAccessToken {
  accessToken          String   @id
  accessTokenExpiresAt DateTime

  //client
  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id])

  //scope
  scopes OAuthScope[]

  //user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model OAuthRefreshToken {
  refreshToken          String   @id
  refreshTokenExpiresAt DateTime

  //client
  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id])

  //scope
  scopes OAuthScope[]

  //user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

}

enum OAuthGrants {
  authorization_code
  client_credentials
  refresh_token
  password
  extension
}

model OAuthClient {
  id                   String        @id
  secret               String        @unique
  grants               OAuthGrants[]
  redirectUris         String[]
  accessTokenLifetime  Int?
  refreshTokenLifetime Int?

  //token
  accessTokens  OAuthAccessToken[]
  refreshTokens OAuthRefreshToken[]

  //user
  owner User @relation(fields: [onwerId], references: [id])

  //code
  authorizationCodes OAuthAuthorizationCode[]

  //scope
  scopes OAuthScope[]

  onwerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([secret])
}

model OAuthAuthorizationCode {
  authorizationCode String   @id
  expiresAt         DateTime
  redirectUri       String?

  //client
  clientId String
  client   OAuthClient @relation(fields: [clientId], references: [id])

  //scope
  scopes OAuthScope[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
